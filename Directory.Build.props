<Project>
    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <LangVersion>preview</LangVersion>
        <OutputType>Library</OutputType>
        <Nullable>enable</Nullable>
        <WarningsAsErrors>nullable</WarningsAsErrors>
        <Features>strict</Features>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <DebugType>portable</DebugType>
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
        <AnalysisLevel>10</AnalysisLevel>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <AnalysisMode>All</AnalysisMode>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <NuGetAudit>true</NuGetAudit>
        <NuGetAuditLevel>low</NuGetAuditLevel>
        <NuGetAuditMode>all</NuGetAuditMode>
        <SatelliteResourceLanguages>en</SatelliteResourceLanguages>
        <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>
        <GitVersion_NoFetchEnabled>true</GitVersion_NoFetchEnabled>
        <GitVersionTargetFramework>net8.0</GitVersionTargetFramework>
        <NuGetAudit>true</NuGetAudit>
        <NuGetAuditLevel>low</NuGetAuditLevel>
        <NuGetAuditMode>all</NuGetAuditMode>
        <NoWarn>$(NoWarn);
            CS1591; <!--Missing XML comment for publicly visible type or member-->
            
            CA1000; <!--Do not declare static members on generic types-->
            CA1002; <!--Change 'List ' to use 'Collection ', 'ReadOnlyCollection ' or 'KeyedCollection'-->
            CA1003; <!--Use generic event handler instances-->
            CA1005; <!-- Consider a design where X has no more than 2 type parameters-->
            CA1008; <!--Enums should have zero value-->
            CA1028; <!--Enum storage should be Int32-->
            CA1032; <!--Implement standard exception constructors-->
            CA1034; <!--Do not nest type. Alternatively, change its accessibility so that it is not externally visible.-->
            CA1054; <!--Change the type of parameter 'url' of method from 'string' to 'System.Uri', or provide an overload  that allows 'url' to be passed as a 'System.Uri' object-->
            CA1055; <!--Change the return type of method from 'string' to 'System.Uri'-->
            CA1056; <!--URI properties should not be strings-->
            CA1062; <!--Validate arguments of public methods-->
            CA1707; <!--Remove the underscores from member name-->
            CA1819; <!-- Properties should not return arrays-->
            CA1849; <!--synchronously blocks. Await instead. -->
            CA2007; <!--Consider calling ConfigureAwait on the awaited task -->
            CA2234; <!--Pass System.Uri objects instead of strings-->

            EA0000;
            EA0001;
            EA0002; <!--Use 'System.TimeProvider' to make the code easier to test-->
            EA0014; <!--Add CancellationToken as the parameter of asynchronous method-->

            MA0004; <!--Use Task.ConfigureAwait(false) as the current SynchronizationContext is not needed-->
            MA0016; <!--Prefer returning collection abstraction instead of implementation-->
            MA0018; <!--Do not declare static members on generic types-->
            MA0023; <!--Add RegexOptions.ExplicitCapture-->
            MA0026; <!--Fix TODO comment-->
            MA0038; <!--Make method static (deprecated, use CA1822 instead)-->
            MA0042; <!--Do not use blocking calls in an async method-->
            MA0046; <!--Use EventHandler<T> to declare events-->
            MA0051; <!--Method is too long-->
            MA0099; <!-- Use Explicit enum value instead of 0 -->
            MA0101; <!--String contains an implicit end of line character-->
            MA0136; <!-- Raw String contains an implicit end of line character-->

            IDE0010; <!--Add missing cases to switch statement-->
            IDE0022; <!--Use expression body for methods-->
            IDE0024; <!--Use expression body for operators-->
            IDE0058; <!--Remove unnecessary expression value-->
            IDE0061; <!--Use expression body for local functions-->
            IDE0160; <!--Namespace declaration preferences-->

            S107; <!--Method has parameters, which is greater than the 7 authorized. -->
            S1067; <!--Reduce the number of conditional operators used in the expression (maximum allowed 3).-->
            S1075; <!--Refactor your code not to use hardcoded absolute paths or URIs.-->
            S1133; <!--Do not forget to remove this deprecated code someday. -->
            S1244; <!--Do not check floating point inequality with exact values, use a range instead.-->
            S1694; <!--Convert this 'abstract' class to a concrete type with a protected constructor. -->
            S1994; <!--This loop's stop condition tests 'X' but the incrementer updates 'Y'.-->
            S2139; <!--Either log this exception and handle it, or rethrow it with some contextual information.-->
            S2302; <!--Replace the string 'param' with 'nameof(param)'-->
            S2326; <!--'T' is not used in the interface.-->
            S2743; <!-- Static fields should not be used in generic types-->
            S3236; <!--Remove this argument from the method call; it hides the caller information.-->
            S3872; <!--Rename the parameter so that it does not duplicate the method name-->
            S3906; <!--Change the signature of that event handler to match the specified signature. -->
            S3908; <!--Refactor this delegate to use 'System.EventHandler<TEventArgs>'. -->
            S3925; <!--Update this implementation of 'ISerializable' to conform to the recommended serialization pattern.-->
            S3995; <!-- Change this return type to 'System.Uri'. -->
            S3996; <!--Change this property type to 'System.Uri'. -->
            S4022; <!--Change this enum storage to 'Int32'-->
            S6966; <!--Awaitable method should be used-->

            SA1010; <!--Opening square brackets should not be preceded by a space-->
            SA1122; <!--Use string.Empty for empty strings -->
            SA1116; <!--The parameters should begin on the line after the declaration, whenever the parameter span across multiple lines-->
            SA1117; <!-- The parameters should all be placed on the same line or each parameter should be placed on its own line-->
            SA1200; <!--Using directive should appear within a namespace declaration-->
            SA1201; <!--A constructor should not follow a property -->
            SA1202; <!--'public' members should come before 'private' members -->
            SA1300; <!--Element should begin with an uppercase letter -->
            SA1309; <!--Field should not begin with an underscore-->
            SA1313; <!--Parameter should begin with lower-case letter-->
            SA1402; <!--File may only contain a single type -->
            SA1515; <!--Single-line comment should be preceded by blank line-->
            SA1600; <!--Elements should be documented -->
            SA1601; <!-- Partial elements should be documented -->
            SA1602; <!--Enumeration items should be documented-->
            SA1604; <!--Element documentation should have summary -->
            SA1615; <!--Element return value should be documented -->
            SA1633; <!--The file header XML is invalid.-->
            SA1649; <!-- File name should match first type name -->
            
            RCS1031; <!-- Remove unnecessary braces. -->
            RCS1135; <!-- Declare enum member with zero value (when enum has FlagsAttribute).-->
            RCS1139; <!-- Add summary element to documentation comment.-->
            RCS1141; <!--Add 'param' element to documentation comment-->
            RCS1158; <!--Static member in generic type should use a type parameter-->
            RCS1181; <!--Convert comment to documentation comment.-->
            RCS1194; <!--Implement exception constructors.-->

            VSTHRD111; <!--Add .ConfigureAwait(bool) to your await expression-->
            
            AsyncFixer02; <!--ToArrayAsync should be used instead of -->
        </NoWarn>
        <WarningsNotAsErrors>
            MA0048; <!--File name must match type name-->
            S125;  <!--Remove this commented out code.-->
            S1135; <!--Complete the task associated to this 'TODO' comment.-->

        </WarningsNotAsErrors>
    </PropertyGroup>
    
    <Choose>
        <When Condition="'$(Configuration)' == 'Debug'">
            <PropertyGroup>
                <WarningsNotAsErrors>$(WarningsNotAsErrors);
                    CA1031; <!--Modify to catch a more specific allowed exception type, or rethrow the exception-->
                    CA1822;
                    CS0168; <!--The variable is declared but never used-->

                    ERP022; <!--An exit point swallows an unobserved exception-->
                    
                    IDE0005; <!--Using directive is unnecessary.-->
                    IDE0009; <!--Add 'this' or 'Me' qualification-->
                    IDE0051; <!--Private member is unused-->
                    IDE0060; <!--Remove unused parameter -->

                    S125; <!--Remove this commented out code.-->
                    S1144; <!--Remove the unused private method-->
                    S1172; <!--Remove this unused method parameter-->

                    RCS1163; <!--Unused parameter-->
                    RCS1213; <!--Remove unused method declaration-->

                    SA1027; <!--Tabs and spaces should be used correctly-->
                    SA1101; <!--Prefix local calls with this-->
                    SA1512; <!--Single-line comments should not be followed by blank line-->

                    NU1901; <!-- Package has a known low severity vulnerability -->
                    NU1902; <!-- Package has a known low moderate vulnerability -->
                    NU1903; <!-- Package has a known low high vulnerability -->
                    NU1904; <!-- Package has a known low critical vulnerability -->
                </WarningsNotAsErrors>
            </PropertyGroup>
        </When>
    </Choose>

    <ItemDefinitionGroup>
        <PackageReference>
            <PrivateAssets>contentfiles;analyzers;build;compile</PrivateAssets>
        </PackageReference>
        <ProjectReference>
            <PrivateAssets>contentfiles;analyzers;build;compile</PrivateAssets>
        </ProjectReference>
    </ItemDefinitionGroup>
    
    <ItemGroup>
        <AssemblyAttribute Include="System.CLSCompliantAttribute">
            <_Parameter1>false</_Parameter1>
        </AssemblyAttribute>
        <AdditionalFiles Include="$(ProjectDir)../../BannedSymbols.txt" />
    </ItemGroup>
</Project>
