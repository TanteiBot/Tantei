// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Update.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PaperMalKing.Database.CompiledModels
{
    public partial class DatabaseContextModel
    {
        private DatabaseContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("04658b7b-32f7-48b6-a34d-757572fc732b"), entityTypeCount: 19)
        {
        }

        partial void Initialize()
        {
            var discordGuildDiscordUser = DiscordGuildDiscordUserEntityType.Create(this);
            var aniListFavourite = AniListFavouriteEntityType.Create(this);
            var aniListUser = AniListUserEntityType.Create(this);
            var customUpdateColor = CustomUpdateColorEntityType.Create(this);
            var botUser = BotUserEntityType.Create(this);
            var discordGuild = DiscordGuildEntityType.Create(this);
            var discordUser = DiscordUserEntityType.Create(this);
            var baseMalFavorite = BaseMalFavoriteEntityType.Create(this);
            var malUser = MalUserEntityType.Create(this);
            var customUpdateColor0 = CustomUpdateColor0EntityType.Create(this);
            var shikiDbAchievement = ShikiDbAchievementEntityType.Create(this);
            var shikiFavourite = ShikiFavouriteEntityType.Create(this);
            var shikiUser = ShikiUserEntityType.Create(this);
            var customUpdateColor1 = CustomUpdateColor1EntityType.Create(this);
            var malFavoriteAnime = MalFavoriteAnimeEntityType.Create(this, baseMalFavorite);
            var malFavoriteCharacter = MalFavoriteCharacterEntityType.Create(this, baseMalFavorite);
            var malFavoriteCompany = MalFavoriteCompanyEntityType.Create(this, baseMalFavorite);
            var malFavoriteManga = MalFavoriteMangaEntityType.Create(this, baseMalFavorite);
            var malFavoritePerson = MalFavoritePersonEntityType.Create(this, baseMalFavorite);

            DiscordGuildDiscordUserEntityType.CreateForeignKey1(discordGuildDiscordUser, discordGuild);
            DiscordGuildDiscordUserEntityType.CreateForeignKey2(discordGuildDiscordUser, discordUser);
            AniListFavouriteEntityType.CreateForeignKey1(aniListFavourite, aniListUser);
            AniListUserEntityType.CreateForeignKey1(aniListUser, discordUser);
            CustomUpdateColorEntityType.CreateForeignKey1(customUpdateColor, aniListUser);
            DiscordUserEntityType.CreateForeignKey1(discordUser, botUser);
            MalUserEntityType.CreateForeignKey1(malUser, discordUser);
            CustomUpdateColor0EntityType.CreateForeignKey1(customUpdateColor0, malUser);
            ShikiDbAchievementEntityType.CreateForeignKey1(shikiDbAchievement, shikiUser);
            ShikiFavouriteEntityType.CreateForeignKey1(shikiFavourite, shikiUser);
            ShikiUserEntityType.CreateForeignKey1(shikiUser, discordUser);
            CustomUpdateColor1EntityType.CreateForeignKey1(customUpdateColor1, shikiUser);
            MalFavoriteAnimeEntityType.CreateForeignKey1(malFavoriteAnime, malUser);
            MalFavoriteCharacterEntityType.CreateForeignKey1(malFavoriteCharacter, malUser);
            MalFavoriteCompanyEntityType.CreateForeignKey1(malFavoriteCompany, malUser);
            MalFavoriteMangaEntityType.CreateForeignKey1(malFavoriteManga, malUser);
            MalFavoritePersonEntityType.CreateForeignKey1(malFavoritePerson, malUser);

            DiscordGuildEntityType.CreateSkipNavigation1(discordGuild, discordUser, discordGuildDiscordUser);
            DiscordUserEntityType.CreateSkipNavigation1(discordUser, discordGuild, discordGuildDiscordUser);

            DiscordGuildDiscordUserEntityType.CreateAnnotations(discordGuildDiscordUser);
            AniListFavouriteEntityType.CreateAnnotations(aniListFavourite);
            AniListUserEntityType.CreateAnnotations(aniListUser);
            CustomUpdateColorEntityType.CreateAnnotations(customUpdateColor);
            BotUserEntityType.CreateAnnotations(botUser);
            DiscordGuildEntityType.CreateAnnotations(discordGuild);
            DiscordUserEntityType.CreateAnnotations(discordUser);
            BaseMalFavoriteEntityType.CreateAnnotations(baseMalFavorite);
            MalUserEntityType.CreateAnnotations(malUser);
            CustomUpdateColor0EntityType.CreateAnnotations(customUpdateColor0);
            ShikiDbAchievementEntityType.CreateAnnotations(shikiDbAchievement);
            ShikiFavouriteEntityType.CreateAnnotations(shikiFavourite);
            ShikiUserEntityType.CreateAnnotations(shikiUser);
            CustomUpdateColor1EntityType.CreateAnnotations(customUpdateColor1);
            MalFavoriteAnimeEntityType.CreateAnnotations(malFavoriteAnime);
            MalFavoriteCharacterEntityType.CreateAnnotations(malFavoriteCharacter);
            MalFavoriteCompanyEntityType.CreateAnnotations(malFavoriteCompany);
            MalFavoriteMangaEntityType.CreateAnnotations(malFavoriteManga);
            MalFavoritePersonEntityType.CreateAnnotations(malFavoritePerson);

            AddAnnotation("ProductVersion", "9.0.0-rc.2.24474.1");
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var discordGuildDiscordUser = FindEntityType("DiscordGuildDiscordUser")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            discordGuildDiscordUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var discordGuildDiscordUserTableBase = new TableBase("DiscordGuildDiscordUser", null, relationalModel);
            var guildsDiscordGuildIdColumnBase = new ColumnBase<ColumnMappingBase>("GuildsDiscordGuildId", "INTEGER", discordGuildDiscordUserTableBase);
            discordGuildDiscordUserTableBase.Columns.Add("GuildsDiscordGuildId", guildsDiscordGuildIdColumnBase);
            var usersDiscordUserIdColumnBase = new ColumnBase<ColumnMappingBase>("UsersDiscordUserId", "INTEGER", discordGuildDiscordUserTableBase);
            discordGuildDiscordUserTableBase.Columns.Add("UsersDiscordUserId", usersDiscordUserIdColumnBase);
            relationalModel.DefaultTables.Add("DiscordGuildDiscordUser", discordGuildDiscordUserTableBase);
            var discordGuildDiscordUserMappingBase = new TableMappingBase<ColumnMappingBase>(discordGuildDiscordUser, discordGuildDiscordUserTableBase, null);
            discordGuildDiscordUserTableBase.AddTypeMapping(discordGuildDiscordUserMappingBase, false);
            defaultTableMappings.Add(discordGuildDiscordUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guildsDiscordGuildIdColumnBase, discordGuildDiscordUser.FindProperty("GuildsDiscordGuildId")!, discordGuildDiscordUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usersDiscordUserIdColumnBase, discordGuildDiscordUser.FindProperty("UsersDiscordUserId")!, discordGuildDiscordUserMappingBase);

            var tableMappings = new List<TableMapping>();
            discordGuildDiscordUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var discordGuildDiscordUserTable = new Table("DiscordGuildDiscordUser", null, relationalModel);
            var guildsDiscordGuildIdColumn = new Column("GuildsDiscordGuildId", "INTEGER", discordGuildDiscordUserTable);
            discordGuildDiscordUserTable.Columns.Add("GuildsDiscordGuildId", guildsDiscordGuildIdColumn);
            guildsDiscordGuildIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(guildsDiscordGuildIdColumn);
            var usersDiscordUserIdColumn = new Column("UsersDiscordUserId", "INTEGER", discordGuildDiscordUserTable);
            discordGuildDiscordUserTable.Columns.Add("UsersDiscordUserId", usersDiscordUserIdColumn);
            usersDiscordUserIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(usersDiscordUserIdColumn);
            relationalModel.Tables.Add(("DiscordGuildDiscordUser", null), discordGuildDiscordUserTable);
            var discordGuildDiscordUserTableMapping = new TableMapping(discordGuildDiscordUser, discordGuildDiscordUserTable, null);
            discordGuildDiscordUserTable.AddTypeMapping(discordGuildDiscordUserTableMapping, false);
            tableMappings.Add(discordGuildDiscordUserTableMapping);
            RelationalModel.CreateColumnMapping(guildsDiscordGuildIdColumn, discordGuildDiscordUser.FindProperty("GuildsDiscordGuildId")!, discordGuildDiscordUserTableMapping);
            RelationalModel.CreateColumnMapping(usersDiscordUserIdColumn, discordGuildDiscordUser.FindProperty("UsersDiscordUserId")!, discordGuildDiscordUserTableMapping);
            var pK_DiscordGuildDiscordUser = new UniqueConstraint("PK_DiscordGuildDiscordUser", discordGuildDiscordUserTable, new[] { guildsDiscordGuildIdColumn, usersDiscordUserIdColumn });
            discordGuildDiscordUserTable.PrimaryKey = pK_DiscordGuildDiscordUser;
            pK_DiscordGuildDiscordUser.SetRowKeyValueFactory(new CompositeRowKeyValueFactory(pK_DiscordGuildDiscordUser));
            var pK_DiscordGuildDiscordUserKey = RelationalModel.GetKey(this,
                "DiscordGuildDiscordUser",
                new[] { "GuildsDiscordGuildId", "UsersDiscordUserId" });
            pK_DiscordGuildDiscordUser.MappedKeys.Add(pK_DiscordGuildDiscordUserKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DiscordGuildDiscordUserKey).Add(pK_DiscordGuildDiscordUser);
            discordGuildDiscordUserTable.UniqueConstraints.Add("PK_DiscordGuildDiscordUser", pK_DiscordGuildDiscordUser);
            var iX_DiscordGuildDiscordUser_UsersDiscordUserId = new TableIndex(
            "IX_DiscordGuildDiscordUser_UsersDiscordUserId", discordGuildDiscordUserTable, new[] { usersDiscordUserIdColumn }, false);
            iX_DiscordGuildDiscordUser_UsersDiscordUserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_DiscordGuildDiscordUser_UsersDiscordUserId));
            var iX_DiscordGuildDiscordUser_UsersDiscordUserIdIx = RelationalModel.GetIndex(this,
                "DiscordGuildDiscordUser",
                new[] { "UsersDiscordUserId" });
            iX_DiscordGuildDiscordUser_UsersDiscordUserId.MappedIndexes.Add(iX_DiscordGuildDiscordUser_UsersDiscordUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DiscordGuildDiscordUser_UsersDiscordUserIdIx).Add(iX_DiscordGuildDiscordUser_UsersDiscordUserId);
            discordGuildDiscordUserTable.Indexes.Add("IX_DiscordGuildDiscordUser_UsersDiscordUserId", iX_DiscordGuildDiscordUser_UsersDiscordUserId);

            var aniListFavourite = FindEntityType("PaperMalKing.Database.Models.AniList.AniListFavourite")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            aniListFavourite.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var paperMalKingDatabaseModelsAniListAniListFavouriteTableBase = new TableBase("PaperMalKing.Database.Models.AniList.AniListFavourite", null, relationalModel);
            var favouriteTypeColumnBase = new ColumnBase<ColumnMappingBase>("FavouriteType", "INTEGER", paperMalKingDatabaseModelsAniListAniListFavouriteTableBase);
            paperMalKingDatabaseModelsAniListAniListFavouriteTableBase.Columns.Add("FavouriteType", favouriteTypeColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", paperMalKingDatabaseModelsAniListAniListFavouriteTableBase);
            paperMalKingDatabaseModelsAniListAniListFavouriteTableBase.Columns.Add("Id", idColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", paperMalKingDatabaseModelsAniListAniListFavouriteTableBase);
            paperMalKingDatabaseModelsAniListAniListFavouriteTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.AniList.AniListFavourite", paperMalKingDatabaseModelsAniListAniListFavouriteTableBase);
            var paperMalKingDatabaseModelsAniListAniListFavouriteMappingBase = new TableMappingBase<ColumnMappingBase>(aniListFavourite, paperMalKingDatabaseModelsAniListAniListFavouriteTableBase, null);
            paperMalKingDatabaseModelsAniListAniListFavouriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsAniListAniListFavouriteMappingBase, false);
            defaultTableMappings0.Add(paperMalKingDatabaseModelsAniListAniListFavouriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favouriteTypeColumnBase, aniListFavourite.FindProperty("FavouriteType")!, paperMalKingDatabaseModelsAniListAniListFavouriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, aniListFavourite.FindProperty("Id")!, paperMalKingDatabaseModelsAniListAniListFavouriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, aniListFavourite.FindProperty("UserId")!, paperMalKingDatabaseModelsAniListAniListFavouriteMappingBase);

            var tableMappings0 = new List<TableMapping>();
            aniListFavourite.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aniListFavouritesTable = new Table("AniListFavourites", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", aniListFavouritesTable);
            aniListFavouritesTable.Columns.Add("Id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(idColumn);
            var favouriteTypeColumn = new Column("FavouriteType", "INTEGER", aniListFavouritesTable);
            aniListFavouritesTable.Columns.Add("FavouriteType", favouriteTypeColumn);
            favouriteTypeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<byte>(favouriteTypeColumn);
            var userIdColumn = new Column("UserId", "INTEGER", aniListFavouritesTable);
            aniListFavouritesTable.Columns.Add("UserId", userIdColumn);
            userIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(userIdColumn);
            relationalModel.Tables.Add(("AniListFavourites", null), aniListFavouritesTable);
            var aniListFavouritesTableMapping = new TableMapping(aniListFavourite, aniListFavouritesTable, null);
            aniListFavouritesTable.AddTypeMapping(aniListFavouritesTableMapping, false);
            tableMappings0.Add(aniListFavouritesTableMapping);
            RelationalModel.CreateColumnMapping(favouriteTypeColumn, aniListFavourite.FindProperty("FavouriteType")!, aniListFavouritesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, aniListFavourite.FindProperty("Id")!, aniListFavouritesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, aniListFavourite.FindProperty("UserId")!, aniListFavouritesTableMapping);
            var pK_AniListFavourites = new UniqueConstraint("PK_AniListFavourites", aniListFavouritesTable, new[] { idColumn, favouriteTypeColumn, userIdColumn });
            aniListFavouritesTable.PrimaryKey = pK_AniListFavourites;
            pK_AniListFavourites.SetRowKeyValueFactory(new CompositeRowKeyValueFactory(pK_AniListFavourites));
            var pK_AniListFavouritesKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.AniList.AniListFavourite",
                new[] { "Id", "FavouriteType", "UserId" });
            pK_AniListFavourites.MappedKeys.Add(pK_AniListFavouritesKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AniListFavouritesKey).Add(pK_AniListFavourites);
            aniListFavouritesTable.UniqueConstraints.Add("PK_AniListFavourites", pK_AniListFavourites);
            var iX_AniListFavourites_UserId = new TableIndex(
            "IX_AniListFavourites_UserId", aniListFavouritesTable, new[] { userIdColumn }, false);
            iX_AniListFavourites_UserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<uint>(iX_AniListFavourites_UserId));
            var iX_AniListFavourites_UserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.AniList.AniListFavourite",
                new[] { "UserId" });
            iX_AniListFavourites_UserId.MappedIndexes.Add(iX_AniListFavourites_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AniListFavourites_UserIdIx).Add(iX_AniListFavourites_UserId);
            aniListFavouritesTable.Indexes.Add("IX_AniListFavourites_UserId", iX_AniListFavourites_UserId);

            var aniListUser = FindEntityType("PaperMalKing.Database.Models.AniList.AniListUser")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            aniListUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var paperMalKingDatabaseModelsAniListAniListUserTableBase = new TableBase("PaperMalKing.Database.Models.AniList.AniListUser", null, relationalModel);
            var discordUserIdColumnBase = new ColumnBase<ColumnMappingBase>("DiscordUserId", "INTEGER", paperMalKingDatabaseModelsAniListAniListUserTableBase);
            paperMalKingDatabaseModelsAniListAniListUserTableBase.Columns.Add("DiscordUserId", discordUserIdColumnBase);
            var favouritesIdHashColumnBase = new ColumnBase<ColumnMappingBase>("FavouritesIdHash", "TEXT", paperMalKingDatabaseModelsAniListAniListUserTableBase);
            paperMalKingDatabaseModelsAniListAniListUserTableBase.Columns.Add("FavouritesIdHash", favouritesIdHashColumnBase);
            var featuresColumnBase = new ColumnBase<ColumnMappingBase>("Features", "INTEGER", paperMalKingDatabaseModelsAniListAniListUserTableBase);
            paperMalKingDatabaseModelsAniListAniListUserTableBase.Columns.Add("Features", featuresColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", paperMalKingDatabaseModelsAniListAniListUserTableBase);
            paperMalKingDatabaseModelsAniListAniListUserTableBase.Columns.Add("Id", idColumnBase0);
            var lastActivityTimestampColumnBase = new ColumnBase<ColumnMappingBase>("LastActivityTimestamp", "INTEGER", paperMalKingDatabaseModelsAniListAniListUserTableBase);
            paperMalKingDatabaseModelsAniListAniListUserTableBase.Columns.Add("LastActivityTimestamp", lastActivityTimestampColumnBase);
            var lastReviewTimestampColumnBase = new ColumnBase<ColumnMappingBase>("LastReviewTimestamp", "INTEGER", paperMalKingDatabaseModelsAniListAniListUserTableBase);
            paperMalKingDatabaseModelsAniListAniListUserTableBase.Columns.Add("LastReviewTimestamp", lastReviewTimestampColumnBase);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.AniList.AniListUser", paperMalKingDatabaseModelsAniListAniListUserTableBase);
            var paperMalKingDatabaseModelsAniListAniListUserMappingBase = new TableMappingBase<ColumnMappingBase>(aniListUser, paperMalKingDatabaseModelsAniListAniListUserTableBase, null);
            paperMalKingDatabaseModelsAniListAniListUserTableBase.AddTypeMapping(paperMalKingDatabaseModelsAniListAniListUserMappingBase, false);
            defaultTableMappings1.Add(paperMalKingDatabaseModelsAniListAniListUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, aniListUser.FindProperty("Id")!, paperMalKingDatabaseModelsAniListAniListUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discordUserIdColumnBase, aniListUser.FindProperty("DiscordUserId")!, paperMalKingDatabaseModelsAniListAniListUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favouritesIdHashColumnBase, aniListUser.FindProperty("FavouritesIdHash")!, paperMalKingDatabaseModelsAniListAniListUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)featuresColumnBase, aniListUser.FindProperty("Features")!, paperMalKingDatabaseModelsAniListAniListUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastActivityTimestampColumnBase, aniListUser.FindProperty("LastActivityTimestamp")!, paperMalKingDatabaseModelsAniListAniListUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastReviewTimestampColumnBase, aniListUser.FindProperty("LastReviewTimestamp")!, paperMalKingDatabaseModelsAniListAniListUserMappingBase);

            var tableMappings1 = new List<TableMapping>();
            aniListUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aniListUsersTable = new Table("AniListUsers", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", aniListUsersTable);
            aniListUsersTable.Columns.Add("Id", idColumn0);
            idColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(idColumn0);
            var colorsColumn = new JsonColumn("Colors", "TEXT", aniListUsersTable)
            {
                IsNullable = true
            };
            aniListUsersTable.Columns.Add("Colors", colorsColumn);
            colorsColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<JsonElement>(colorsColumn);
            var discordUserIdColumn = new Column("DiscordUserId", "INTEGER", aniListUsersTable);
            aniListUsersTable.Columns.Add("DiscordUserId", discordUserIdColumn);
            discordUserIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(discordUserIdColumn);
            var favouritesIdHashColumn = new Column("FavouritesIdHash", "TEXT", aniListUsersTable);
            aniListUsersTable.Columns.Add("FavouritesIdHash", favouritesIdHashColumn);
            favouritesIdHashColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(favouritesIdHashColumn);
            var featuresColumn = new Column("Features", "INTEGER", aniListUsersTable);
            aniListUsersTable.Columns.Add("Features", featuresColumn);
            featuresColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(featuresColumn);
            var lastActivityTimestampColumn = new Column("LastActivityTimestamp", "INTEGER", aniListUsersTable);
            aniListUsersTable.Columns.Add("LastActivityTimestamp", lastActivityTimestampColumn);
            lastActivityTimestampColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<long>(lastActivityTimestampColumn);
            var lastReviewTimestampColumn = new Column("LastReviewTimestamp", "INTEGER", aniListUsersTable);
            aniListUsersTable.Columns.Add("LastReviewTimestamp", lastReviewTimestampColumn);
            lastReviewTimestampColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<long>(lastReviewTimestampColumn);
            relationalModel.Tables.Add(("AniListUsers", null), aniListUsersTable);
            var aniListUsersTableMapping = new TableMapping(aniListUser, aniListUsersTable, null)
            {
                IsSharedTablePrincipal = true,
            };
            aniListUsersTable.AddTypeMapping(aniListUsersTableMapping, false);
            tableMappings1.Add(aniListUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, aniListUser.FindProperty("Id")!, aniListUsersTableMapping);
            RelationalModel.CreateColumnMapping(discordUserIdColumn, aniListUser.FindProperty("DiscordUserId")!, aniListUsersTableMapping);
            RelationalModel.CreateColumnMapping(favouritesIdHashColumn, aniListUser.FindProperty("FavouritesIdHash")!, aniListUsersTableMapping);
            RelationalModel.CreateColumnMapping(featuresColumn, aniListUser.FindProperty("Features")!, aniListUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastActivityTimestampColumn, aniListUser.FindProperty("LastActivityTimestamp")!, aniListUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastReviewTimestampColumn, aniListUser.FindProperty("LastReviewTimestamp")!, aniListUsersTableMapping);

            var customUpdateColor = FindEntityType("PaperMalKing.Database.Models.AniList.AniListUser.Colors#CustomUpdateColor")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            customUpdateColor.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorTableBase = new TableBase("PaperMalKing.Database.Models.AniList.AniListUser.Colors#CustomUpdateColor", null, relationalModel);
            var colorsColumnBase = new JsonColumnBase("Colors", "TEXT", paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorTableBase.Columns.Add("Colors", colorsColumnBase);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.AniList.AniListUser.Colors#CustomUpdateColor", paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorTableBase);
            var paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorMappingBase = new TableMappingBase<ColumnMappingBase>(customUpdateColor, paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorTableBase, null);
            paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorTableBase.AddTypeMapping(paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorMappingBase, false);
            defaultTableMappings2.Add(paperMalKingDatabaseModelsAniListAniListUserColorsCustomUpdateColorMappingBase);

            var tableMappings2 = new List<TableMapping>();
            customUpdateColor.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aniListUsersTableMapping0 = new TableMapping(customUpdateColor, aniListUsersTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            aniListUsersTable.AddTypeMapping(aniListUsersTableMapping0, true);
            tableMappings2.Add(aniListUsersTableMapping0);
            aniListUsersTable.AddRowInternalForeignKey(customUpdateColor, RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.AniList.AniListUser.Colors#CustomUpdateColor",
                new[] { "AniListUserId" },
                "PaperMalKing.Database.Models.AniList.AniListUser",
                new[] { "Id" }));
            var pK_AniListUsers = new UniqueConstraint("PK_AniListUsers", aniListUsersTable, new[] { idColumn0 });
            aniListUsersTable.PrimaryKey = pK_AniListUsers;
            pK_AniListUsers.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<uint>(pK_AniListUsers));
            var pK_AniListUsersKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.AniList.AniListUser",
                new[] { "Id" });
            pK_AniListUsers.MappedKeys.Add(pK_AniListUsersKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AniListUsersKey).Add(pK_AniListUsers);
            aniListUsersTable.UniqueConstraints.Add("PK_AniListUsers", pK_AniListUsers);
            var iX_AniListUsers_DiscordUserId = new TableIndex(
            "IX_AniListUsers_DiscordUserId", aniListUsersTable, new[] { discordUserIdColumn }, true);
            iX_AniListUsers_DiscordUserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_AniListUsers_DiscordUserId));
            var iX_AniListUsers_DiscordUserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.AniList.AniListUser",
                new[] { "DiscordUserId" });
            iX_AniListUsers_DiscordUserId.MappedIndexes.Add(iX_AniListUsers_DiscordUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AniListUsers_DiscordUserIdIx).Add(iX_AniListUsers_DiscordUserId);
            aniListUsersTable.Indexes.Add("IX_AniListUsers_DiscordUserId", iX_AniListUsers_DiscordUserId);
            var iX_AniListUsers_Features = new TableIndex(
            "IX_AniListUsers_Features", aniListUsersTable, new[] { featuresColumn }, false);
            iX_AniListUsers_Features.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_AniListUsers_Features));
            var iX_AniListUsers_FeaturesIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.AniList.AniListUser",
                new[] { "Features" });
            iX_AniListUsers_Features.MappedIndexes.Add(iX_AniListUsers_FeaturesIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AniListUsers_FeaturesIx).Add(iX_AniListUsers_Features);
            aniListUsersTable.Indexes.Add("IX_AniListUsers_Features", iX_AniListUsers_Features);

            var botUser = FindEntityType("PaperMalKing.Database.Models.BotUser")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            botUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var paperMalKingDatabaseModelsBotUserTableBase = new TableBase("PaperMalKing.Database.Models.BotUser", null, relationalModel);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", paperMalKingDatabaseModelsBotUserTableBase);
            paperMalKingDatabaseModelsBotUserTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.BotUser", paperMalKingDatabaseModelsBotUserTableBase);
            var paperMalKingDatabaseModelsBotUserMappingBase = new TableMappingBase<ColumnMappingBase>(botUser, paperMalKingDatabaseModelsBotUserTableBase, null);
            paperMalKingDatabaseModelsBotUserTableBase.AddTypeMapping(paperMalKingDatabaseModelsBotUserMappingBase, false);
            defaultTableMappings3.Add(paperMalKingDatabaseModelsBotUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, botUser.FindProperty("UserId")!, paperMalKingDatabaseModelsBotUserMappingBase);

            var tableMappings3 = new List<TableMapping>();
            botUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var botUsersTable = new Table("BotUsers", null, relationalModel);
            var userIdColumn0 = new Column("UserId", "INTEGER", botUsersTable);
            botUsersTable.Columns.Add("UserId", userIdColumn0);
            userIdColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(userIdColumn0);
            relationalModel.Tables.Add(("BotUsers", null), botUsersTable);
            var botUsersTableMapping = new TableMapping(botUser, botUsersTable, null);
            botUsersTable.AddTypeMapping(botUsersTableMapping, false);
            tableMappings3.Add(botUsersTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, botUser.FindProperty("UserId")!, botUsersTableMapping);
            var pK_BotUsers = new UniqueConstraint("PK_BotUsers", botUsersTable, new[] { userIdColumn0 });
            botUsersTable.PrimaryKey = pK_BotUsers;
            pK_BotUsers.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<uint>(pK_BotUsers));
            var pK_BotUsersKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.BotUser",
                new[] { "UserId" });
            pK_BotUsers.MappedKeys.Add(pK_BotUsersKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BotUsersKey).Add(pK_BotUsers);
            botUsersTable.UniqueConstraints.Add("PK_BotUsers", pK_BotUsers);

            var discordGuild = FindEntityType("PaperMalKing.Database.Models.DiscordGuild")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            discordGuild.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var paperMalKingDatabaseModelsDiscordGuildTableBase = new TableBase("PaperMalKing.Database.Models.DiscordGuild", null, relationalModel);
            var discordGuildIdColumnBase = new ColumnBase<ColumnMappingBase>("DiscordGuildId", "INTEGER", paperMalKingDatabaseModelsDiscordGuildTableBase);
            paperMalKingDatabaseModelsDiscordGuildTableBase.Columns.Add("DiscordGuildId", discordGuildIdColumnBase);
            var postingChannelIdColumnBase = new ColumnBase<ColumnMappingBase>("PostingChannelId", "INTEGER", paperMalKingDatabaseModelsDiscordGuildTableBase);
            paperMalKingDatabaseModelsDiscordGuildTableBase.Columns.Add("PostingChannelId", postingChannelIdColumnBase);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.DiscordGuild", paperMalKingDatabaseModelsDiscordGuildTableBase);
            var paperMalKingDatabaseModelsDiscordGuildMappingBase = new TableMappingBase<ColumnMappingBase>(discordGuild, paperMalKingDatabaseModelsDiscordGuildTableBase, null);
            paperMalKingDatabaseModelsDiscordGuildTableBase.AddTypeMapping(paperMalKingDatabaseModelsDiscordGuildMappingBase, false);
            defaultTableMappings4.Add(paperMalKingDatabaseModelsDiscordGuildMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discordGuildIdColumnBase, discordGuild.FindProperty("DiscordGuildId")!, paperMalKingDatabaseModelsDiscordGuildMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postingChannelIdColumnBase, discordGuild.FindProperty("PostingChannelId")!, paperMalKingDatabaseModelsDiscordGuildMappingBase);

            var tableMappings4 = new List<TableMapping>();
            discordGuild.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var discordGuildsTable = new Table("DiscordGuilds", null, relationalModel);
            var discordGuildIdColumn = new Column("DiscordGuildId", "INTEGER", discordGuildsTable);
            discordGuildsTable.Columns.Add("DiscordGuildId", discordGuildIdColumn);
            discordGuildIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(discordGuildIdColumn);
            var postingChannelIdColumn = new Column("PostingChannelId", "INTEGER", discordGuildsTable);
            discordGuildsTable.Columns.Add("PostingChannelId", postingChannelIdColumn);
            postingChannelIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(postingChannelIdColumn);
            relationalModel.Tables.Add(("DiscordGuilds", null), discordGuildsTable);
            var discordGuildsTableMapping = new TableMapping(discordGuild, discordGuildsTable, null);
            discordGuildsTable.AddTypeMapping(discordGuildsTableMapping, false);
            tableMappings4.Add(discordGuildsTableMapping);
            RelationalModel.CreateColumnMapping(discordGuildIdColumn, discordGuild.FindProperty("DiscordGuildId")!, discordGuildsTableMapping);
            RelationalModel.CreateColumnMapping(postingChannelIdColumn, discordGuild.FindProperty("PostingChannelId")!, discordGuildsTableMapping);
            var pK_DiscordGuilds = new UniqueConstraint("PK_DiscordGuilds", discordGuildsTable, new[] { discordGuildIdColumn });
            discordGuildsTable.PrimaryKey = pK_DiscordGuilds;
            pK_DiscordGuilds.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<ulong>(pK_DiscordGuilds));
            var pK_DiscordGuildsKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.DiscordGuild",
                new[] { "DiscordGuildId" });
            pK_DiscordGuilds.MappedKeys.Add(pK_DiscordGuildsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DiscordGuildsKey).Add(pK_DiscordGuilds);
            discordGuildsTable.UniqueConstraints.Add("PK_DiscordGuilds", pK_DiscordGuilds);
            var iX_DiscordGuilds_DiscordGuildId = new TableIndex(
            "IX_DiscordGuilds_DiscordGuildId", discordGuildsTable, new[] { discordGuildIdColumn }, false);
            iX_DiscordGuilds_DiscordGuildId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_DiscordGuilds_DiscordGuildId));
            var iX_DiscordGuilds_DiscordGuildIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.DiscordGuild",
                new[] { "DiscordGuildId" });
            iX_DiscordGuilds_DiscordGuildId.MappedIndexes.Add(iX_DiscordGuilds_DiscordGuildIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DiscordGuilds_DiscordGuildIdIx).Add(iX_DiscordGuilds_DiscordGuildId);
            discordGuildsTable.Indexes.Add("IX_DiscordGuilds_DiscordGuildId", iX_DiscordGuilds_DiscordGuildId);

            var discordUser = FindEntityType("PaperMalKing.Database.Models.DiscordUser")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            discordUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var paperMalKingDatabaseModelsDiscordUserTableBase = new TableBase("PaperMalKing.Database.Models.DiscordUser", null, relationalModel);
            var botUserIdColumnBase = new ColumnBase<ColumnMappingBase>("BotUserId", "INTEGER", paperMalKingDatabaseModelsDiscordUserTableBase);
            paperMalKingDatabaseModelsDiscordUserTableBase.Columns.Add("BotUserId", botUserIdColumnBase);
            var discordUserIdColumnBase0 = new ColumnBase<ColumnMappingBase>("DiscordUserId", "INTEGER", paperMalKingDatabaseModelsDiscordUserTableBase);
            paperMalKingDatabaseModelsDiscordUserTableBase.Columns.Add("DiscordUserId", discordUserIdColumnBase0);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.DiscordUser", paperMalKingDatabaseModelsDiscordUserTableBase);
            var paperMalKingDatabaseModelsDiscordUserMappingBase = new TableMappingBase<ColumnMappingBase>(discordUser, paperMalKingDatabaseModelsDiscordUserTableBase, null);
            paperMalKingDatabaseModelsDiscordUserTableBase.AddTypeMapping(paperMalKingDatabaseModelsDiscordUserMappingBase, false);
            defaultTableMappings5.Add(paperMalKingDatabaseModelsDiscordUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discordUserIdColumnBase0, discordUser.FindProperty("DiscordUserId")!, paperMalKingDatabaseModelsDiscordUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)botUserIdColumnBase, discordUser.FindProperty("BotUserId")!, paperMalKingDatabaseModelsDiscordUserMappingBase);

            var tableMappings5 = new List<TableMapping>();
            discordUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var discordUsersTable = new Table("DiscordUsers", null, relationalModel);
            var discordUserIdColumn0 = new Column("DiscordUserId", "INTEGER", discordUsersTable);
            discordUsersTable.Columns.Add("DiscordUserId", discordUserIdColumn0);
            discordUserIdColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(discordUserIdColumn0);
            var botUserIdColumn = new Column("BotUserId", "INTEGER", discordUsersTable);
            discordUsersTable.Columns.Add("BotUserId", botUserIdColumn);
            botUserIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(botUserIdColumn);
            relationalModel.Tables.Add(("DiscordUsers", null), discordUsersTable);
            var discordUsersTableMapping = new TableMapping(discordUser, discordUsersTable, null);
            discordUsersTable.AddTypeMapping(discordUsersTableMapping, false);
            tableMappings5.Add(discordUsersTableMapping);
            RelationalModel.CreateColumnMapping(discordUserIdColumn0, discordUser.FindProperty("DiscordUserId")!, discordUsersTableMapping);
            RelationalModel.CreateColumnMapping(botUserIdColumn, discordUser.FindProperty("BotUserId")!, discordUsersTableMapping);
            var pK_DiscordUsers = new UniqueConstraint("PK_DiscordUsers", discordUsersTable, new[] { discordUserIdColumn0 });
            discordUsersTable.PrimaryKey = pK_DiscordUsers;
            pK_DiscordUsers.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<ulong>(pK_DiscordUsers));
            var pK_DiscordUsersKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "DiscordUserId" });
            pK_DiscordUsers.MappedKeys.Add(pK_DiscordUsersKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DiscordUsersKey).Add(pK_DiscordUsers);
            discordUsersTable.UniqueConstraints.Add("PK_DiscordUsers", pK_DiscordUsers);
            var iX_DiscordUsers_BotUserId = new TableIndex(
            "IX_DiscordUsers_BotUserId", discordUsersTable, new[] { botUserIdColumn }, true);
            iX_DiscordUsers_BotUserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<uint>(iX_DiscordUsers_BotUserId));
            var iX_DiscordUsers_BotUserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "BotUserId" });
            iX_DiscordUsers_BotUserId.MappedIndexes.Add(iX_DiscordUsers_BotUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DiscordUsers_BotUserIdIx).Add(iX_DiscordUsers_BotUserId);
            discordUsersTable.Indexes.Add("IX_DiscordUsers_BotUserId", iX_DiscordUsers_BotUserId);
            var iX_DiscordUsers_DiscordUserId = new TableIndex(
            "IX_DiscordUsers_DiscordUserId", discordUsersTable, new[] { discordUserIdColumn0 }, false);
            iX_DiscordUsers_DiscordUserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_DiscordUsers_DiscordUserId));
            var iX_DiscordUsers_DiscordUserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "DiscordUserId" });
            iX_DiscordUsers_DiscordUserId.MappedIndexes.Add(iX_DiscordUsers_DiscordUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DiscordUsers_DiscordUserIdIx).Add(iX_DiscordUsers_DiscordUserId);
            discordUsersTable.Indexes.Add("IX_DiscordUsers_DiscordUserId", iX_DiscordUsers_DiscordUserId);

            var baseMalFavorite = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            baseMalFavorite.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase = new TableBase("PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite", null, relationalModel);
            var favoriteTypeColumnBase = new ColumnBase<ColumnMappingBase>("FavoriteType", "INTEGER", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("FavoriteType", favoriteTypeColumnBase);
            var fromTitleNameColumnBase = new ColumnBase<ColumnMappingBase>("FromTitleName", "TEXT", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("FromTitleName", fromTitleNameColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("Id", idColumnBase1);
            var imageUrlColumnBase = new ColumnBase<ColumnMappingBase>("ImageUrl", "TEXT", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("ImageUrl", imageUrlColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("Name", nameColumnBase);
            var nameUrlColumnBase = new ColumnBase<ColumnMappingBase>("NameUrl", "TEXT", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("NameUrl", nameUrlColumnBase);
            var startYearColumnBase = new ColumnBase<ColumnMappingBase>("StartYear", "INTEGER", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("StartYear", startYearColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "TEXT", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("Type", typeColumnBase);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite", paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase);
            var paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase = new TableMappingBase<ColumnMappingBase>(baseMalFavorite, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase, true);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase, false);
            defaultTableMappings6.Add(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favoriteTypeColumnBase, baseMalFavorite.FindProperty("FavoriteType")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, baseMalFavorite.FindProperty("Id")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, baseMalFavorite.FindProperty("UserId")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageUrlColumnBase, baseMalFavorite.FindProperty("ImageUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, baseMalFavorite.FindProperty("Name")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameUrlColumnBase, baseMalFavorite.FindProperty("NameUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase);

            var tableMappings6 = new List<TableMapping>();
            baseMalFavorite.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var malFavoritesTable = new Table("MalFavorites", null, relationalModel);
            var idColumn1 = new Column("Id", "INTEGER", malFavoritesTable);
            malFavoritesTable.Columns.Add("Id", idColumn1);
            idColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(idColumn1);
            var userIdColumn1 = new Column("UserId", "INTEGER", malFavoritesTable);
            malFavoritesTable.Columns.Add("UserId", userIdColumn1);
            userIdColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(userIdColumn1);
            var favoriteTypeColumn = new Column("FavoriteType", "INTEGER", malFavoritesTable);
            malFavoritesTable.Columns.Add("FavoriteType", favoriteTypeColumn);
            favoriteTypeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<byte>(favoriteTypeColumn);
            var fromTitleNameColumn = new Column("FromTitleName", "TEXT", malFavoritesTable)
            {
                IsNullable = true
            };
            malFavoritesTable.Columns.Add("FromTitleName", fromTitleNameColumn);
            fromTitleNameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(fromTitleNameColumn);
            var imageUrlColumn = new Column("ImageUrl", "TEXT", malFavoritesTable)
            {
                IsNullable = true
            };
            malFavoritesTable.Columns.Add("ImageUrl", imageUrlColumn);
            imageUrlColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(imageUrlColumn);
            var nameColumn = new Column("Name", "TEXT", malFavoritesTable);
            malFavoritesTable.Columns.Add("Name", nameColumn);
            nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameColumn);
            var nameUrlColumn = new Column("NameUrl", "TEXT", malFavoritesTable);
            malFavoritesTable.Columns.Add("NameUrl", nameUrlColumn);
            nameUrlColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameUrlColumn);
            var startYearColumn = new Column("StartYear", "INTEGER", malFavoritesTable)
            {
                IsNullable = true
            };
            malFavoritesTable.Columns.Add("StartYear", startYearColumn);
            startYearColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<ushort>(startYearColumn);
            var typeColumn = new Column("Type", "TEXT", malFavoritesTable)
            {
                IsNullable = true
            };
            malFavoritesTable.Columns.Add("Type", typeColumn);
            typeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(typeColumn);
            relationalModel.Tables.Add(("MalFavorites", null), malFavoritesTable);
            var malFavoritesTableMapping = new TableMapping(baseMalFavorite, malFavoritesTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            malFavoritesTable.AddTypeMapping(malFavoritesTableMapping, false);
            tableMappings6.Add(malFavoritesTableMapping);
            RelationalModel.CreateColumnMapping(favoriteTypeColumn, baseMalFavorite.FindProperty("FavoriteType")!, malFavoritesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, baseMalFavorite.FindProperty("Id")!, malFavoritesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, baseMalFavorite.FindProperty("UserId")!, malFavoritesTableMapping);
            RelationalModel.CreateColumnMapping(imageUrlColumn, baseMalFavorite.FindProperty("ImageUrl")!, malFavoritesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, baseMalFavorite.FindProperty("Name")!, malFavoritesTableMapping);
            RelationalModel.CreateColumnMapping(nameUrlColumn, baseMalFavorite.FindProperty("NameUrl")!, malFavoritesTableMapping);

            var malFavoriteAnime = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.MalFavoriteAnime")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            malFavoriteAnime.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0 = new TableMappingBase<ColumnMappingBase>(malFavoriteAnime, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase, null);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0, false);
            defaultTableMappings7.Add(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favoriteTypeColumnBase, malFavoriteAnime.FindProperty("FavoriteType")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, malFavoriteAnime.FindProperty("Id")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, malFavoriteAnime.FindProperty("UserId")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageUrlColumnBase, malFavoriteAnime.FindProperty("ImageUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, malFavoriteAnime.FindProperty("Name")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameUrlColumnBase, malFavoriteAnime.FindProperty("NameUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startYearColumnBase, malFavoriteAnime.FindProperty("StartYear")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, malFavoriteAnime.FindProperty("Type")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase0);

            var tableMappings7 = new List<TableMapping>();
            malFavoriteAnime.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var malFavoritesTableMapping0 = new TableMapping(malFavoriteAnime, malFavoritesTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            malFavoritesTable.AddTypeMapping(malFavoritesTableMapping0, false);
            tableMappings7.Add(malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(favoriteTypeColumn, malFavoriteAnime.FindProperty("FavoriteType")!, malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn1, malFavoriteAnime.FindProperty("Id")!, malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(userIdColumn1, malFavoriteAnime.FindProperty("UserId")!, malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(imageUrlColumn, malFavoriteAnime.FindProperty("ImageUrl")!, malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(nameColumn, malFavoriteAnime.FindProperty("Name")!, malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(nameUrlColumn, malFavoriteAnime.FindProperty("NameUrl")!, malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(startYearColumn, malFavoriteAnime.FindProperty("StartYear")!, malFavoritesTableMapping0);
            RelationalModel.CreateColumnMapping(typeColumn, malFavoriteAnime.FindProperty("Type")!, malFavoritesTableMapping0);

            var malFavoriteCharacter = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.MalFavoriteCharacter")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            malFavoriteCharacter.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1 = new TableMappingBase<ColumnMappingBase>(malFavoriteCharacter, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase, null);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1, false);
            defaultTableMappings8.Add(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favoriteTypeColumnBase, malFavoriteCharacter.FindProperty("FavoriteType")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, malFavoriteCharacter.FindProperty("Id")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, malFavoriteCharacter.FindProperty("UserId")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fromTitleNameColumnBase, malFavoriteCharacter.FindProperty("FromTitleName")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageUrlColumnBase, malFavoriteCharacter.FindProperty("ImageUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, malFavoriteCharacter.FindProperty("Name")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameUrlColumnBase, malFavoriteCharacter.FindProperty("NameUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase1);

            var tableMappings8 = new List<TableMapping>();
            malFavoriteCharacter.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var malFavoritesTableMapping1 = new TableMapping(malFavoriteCharacter, malFavoritesTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            malFavoritesTable.AddTypeMapping(malFavoritesTableMapping1, false);
            tableMappings8.Add(malFavoritesTableMapping1);
            RelationalModel.CreateColumnMapping(favoriteTypeColumn, malFavoriteCharacter.FindProperty("FavoriteType")!, malFavoritesTableMapping1);
            RelationalModel.CreateColumnMapping(idColumn1, malFavoriteCharacter.FindProperty("Id")!, malFavoritesTableMapping1);
            RelationalModel.CreateColumnMapping(userIdColumn1, malFavoriteCharacter.FindProperty("UserId")!, malFavoritesTableMapping1);
            RelationalModel.CreateColumnMapping(fromTitleNameColumn, malFavoriteCharacter.FindProperty("FromTitleName")!, malFavoritesTableMapping1);
            RelationalModel.CreateColumnMapping(imageUrlColumn, malFavoriteCharacter.FindProperty("ImageUrl")!, malFavoritesTableMapping1);
            RelationalModel.CreateColumnMapping(nameColumn, malFavoriteCharacter.FindProperty("Name")!, malFavoritesTableMapping1);
            RelationalModel.CreateColumnMapping(nameUrlColumn, malFavoriteCharacter.FindProperty("NameUrl")!, malFavoritesTableMapping1);

            var malFavoriteCompany = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.MalFavoriteCompany")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            malFavoriteCompany.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2 = new TableMappingBase<ColumnMappingBase>(malFavoriteCompany, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase, null);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2, false);
            defaultTableMappings9.Add(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favoriteTypeColumnBase, malFavoriteCompany.FindProperty("FavoriteType")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, malFavoriteCompany.FindProperty("Id")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, malFavoriteCompany.FindProperty("UserId")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageUrlColumnBase, malFavoriteCompany.FindProperty("ImageUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, malFavoriteCompany.FindProperty("Name")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameUrlColumnBase, malFavoriteCompany.FindProperty("NameUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase2);

            var tableMappings9 = new List<TableMapping>();
            malFavoriteCompany.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var malFavoritesTableMapping2 = new TableMapping(malFavoriteCompany, malFavoritesTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            malFavoritesTable.AddTypeMapping(malFavoritesTableMapping2, false);
            tableMappings9.Add(malFavoritesTableMapping2);
            RelationalModel.CreateColumnMapping(favoriteTypeColumn, malFavoriteCompany.FindProperty("FavoriteType")!, malFavoritesTableMapping2);
            RelationalModel.CreateColumnMapping(idColumn1, malFavoriteCompany.FindProperty("Id")!, malFavoritesTableMapping2);
            RelationalModel.CreateColumnMapping(userIdColumn1, malFavoriteCompany.FindProperty("UserId")!, malFavoritesTableMapping2);
            RelationalModel.CreateColumnMapping(imageUrlColumn, malFavoriteCompany.FindProperty("ImageUrl")!, malFavoritesTableMapping2);
            RelationalModel.CreateColumnMapping(nameColumn, malFavoriteCompany.FindProperty("Name")!, malFavoritesTableMapping2);
            RelationalModel.CreateColumnMapping(nameUrlColumn, malFavoriteCompany.FindProperty("NameUrl")!, malFavoritesTableMapping2);

            var malFavoriteManga = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.MalFavoriteManga")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            malFavoriteManga.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3 = new TableMappingBase<ColumnMappingBase>(malFavoriteManga, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase, null);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3, false);
            defaultTableMappings10.Add(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favoriteTypeColumnBase, malFavoriteManga.FindProperty("FavoriteType")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, malFavoriteManga.FindProperty("Id")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, malFavoriteManga.FindProperty("UserId")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageUrlColumnBase, malFavoriteManga.FindProperty("ImageUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, malFavoriteManga.FindProperty("Name")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameUrlColumnBase, malFavoriteManga.FindProperty("NameUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startYearColumnBase, malFavoriteManga.FindProperty("StartYear")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, malFavoriteManga.FindProperty("Type")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase3);

            var tableMappings10 = new List<TableMapping>();
            malFavoriteManga.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var malFavoritesTableMapping3 = new TableMapping(malFavoriteManga, malFavoritesTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            malFavoritesTable.AddTypeMapping(malFavoritesTableMapping3, false);
            tableMappings10.Add(malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(favoriteTypeColumn, malFavoriteManga.FindProperty("FavoriteType")!, malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(idColumn1, malFavoriteManga.FindProperty("Id")!, malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(userIdColumn1, malFavoriteManga.FindProperty("UserId")!, malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(imageUrlColumn, malFavoriteManga.FindProperty("ImageUrl")!, malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(nameColumn, malFavoriteManga.FindProperty("Name")!, malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(nameUrlColumn, malFavoriteManga.FindProperty("NameUrl")!, malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(startYearColumn, malFavoriteManga.FindProperty("StartYear")!, malFavoritesTableMapping3);
            RelationalModel.CreateColumnMapping(typeColumn, malFavoriteManga.FindProperty("Type")!, malFavoritesTableMapping3);

            var malFavoritePerson = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.MalFavoritePerson")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            malFavoritePerson.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4 = new TableMappingBase<ColumnMappingBase>(malFavoritePerson, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase, null);
            paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4, false);
            defaultTableMappings11.Add(paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favoriteTypeColumnBase, malFavoritePerson.FindProperty("FavoriteType")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, malFavoritePerson.FindProperty("Id")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, malFavoritePerson.FindProperty("UserId")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageUrlColumnBase, malFavoritePerson.FindProperty("ImageUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, malFavoritePerson.FindProperty("Name")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameUrlColumnBase, malFavoritePerson.FindProperty("NameUrl")!, paperMalKingDatabaseModelsMyAnimeListBaseMalFavoriteMappingBase4);

            var tableMappings11 = new List<TableMapping>();
            malFavoritePerson.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var malFavoritesTableMapping4 = new TableMapping(malFavoritePerson, malFavoritesTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            malFavoritesTable.AddTypeMapping(malFavoritesTableMapping4, false);
            tableMappings11.Add(malFavoritesTableMapping4);
            RelationalModel.CreateColumnMapping(favoriteTypeColumn, malFavoritePerson.FindProperty("FavoriteType")!, malFavoritesTableMapping4);
            RelationalModel.CreateColumnMapping(idColumn1, malFavoritePerson.FindProperty("Id")!, malFavoritesTableMapping4);
            RelationalModel.CreateColumnMapping(userIdColumn1, malFavoritePerson.FindProperty("UserId")!, malFavoritesTableMapping4);
            RelationalModel.CreateColumnMapping(imageUrlColumn, malFavoritePerson.FindProperty("ImageUrl")!, malFavoritesTableMapping4);
            RelationalModel.CreateColumnMapping(nameColumn, malFavoritePerson.FindProperty("Name")!, malFavoritesTableMapping4);
            RelationalModel.CreateColumnMapping(nameUrlColumn, malFavoritePerson.FindProperty("NameUrl")!, malFavoritesTableMapping4);
            var pK_MalFavorites = new UniqueConstraint("PK_MalFavorites", malFavoritesTable, new[] { idColumn1, userIdColumn1, favoriteTypeColumn });
            malFavoritesTable.PrimaryKey = pK_MalFavorites;
            pK_MalFavorites.SetRowKeyValueFactory(new CompositeRowKeyValueFactory(pK_MalFavorites));
            var pK_MalFavoritesKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite",
                new[] { "Id", "UserId", "FavoriteType" });
            pK_MalFavorites.MappedKeys.Add(pK_MalFavoritesKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MalFavoritesKey).Add(pK_MalFavorites);
            malFavoritesTable.UniqueConstraints.Add("PK_MalFavorites", pK_MalFavorites);
            var iX_MalFavorites_FavoriteType = new TableIndex(
            "IX_MalFavorites_FavoriteType", malFavoritesTable, new[] { favoriteTypeColumn }, false);
            iX_MalFavorites_FavoriteType.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<byte>(iX_MalFavorites_FavoriteType));
            var iX_MalFavorites_FavoriteTypeIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite",
                new[] { "FavoriteType" });
            iX_MalFavorites_FavoriteType.MappedIndexes.Add(iX_MalFavorites_FavoriteTypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MalFavorites_FavoriteTypeIx).Add(iX_MalFavorites_FavoriteType);
            malFavoritesTable.Indexes.Add("IX_MalFavorites_FavoriteType", iX_MalFavorites_FavoriteType);
            var iX_MalFavorites_Id = new TableIndex(
            "IX_MalFavorites_Id", malFavoritesTable, new[] { idColumn1 }, false);
            iX_MalFavorites_Id.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<uint>(iX_MalFavorites_Id));
            var iX_MalFavorites_IdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite",
                new[] { "Id" });
            iX_MalFavorites_Id.MappedIndexes.Add(iX_MalFavorites_IdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MalFavorites_IdIx).Add(iX_MalFavorites_Id);
            malFavoritesTable.Indexes.Add("IX_MalFavorites_Id", iX_MalFavorites_Id);
            var iX_MalFavorites_UserId = new TableIndex(
            "IX_MalFavorites_UserId", malFavoritesTable, new[] { userIdColumn1 }, false);
            iX_MalFavorites_UserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<uint>(iX_MalFavorites_UserId));
            var iX_MalFavorites_UserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite",
                new[] { "UserId" });
            iX_MalFavorites_UserId.MappedIndexes.Add(iX_MalFavorites_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MalFavorites_UserIdIx).Add(iX_MalFavorites_UserId);
            malFavoritesTable.Indexes.Add("IX_MalFavorites_UserId", iX_MalFavorites_UserId);

            var malUser = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.MalUser")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            malUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var paperMalKingDatabaseModelsMyAnimeListMalUserTableBase = new TableBase("PaperMalKing.Database.Models.MyAnimeList.MalUser", null, relationalModel);
            var discordUserIdColumnBase1 = new ColumnBase<ColumnMappingBase>("DiscordUserId", "INTEGER", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("DiscordUserId", discordUserIdColumnBase1);
            var favoritesIdHashColumnBase = new ColumnBase<ColumnMappingBase>("FavoritesIdHash", "TEXT", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("FavoritesIdHash", favoritesIdHashColumnBase);
            var featuresColumnBase0 = new ColumnBase<ColumnMappingBase>("Features", "INTEGER", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("Features", featuresColumnBase0);
            var lastAnimeUpdateHashColumnBase = new ColumnBase<ColumnMappingBase>("LastAnimeUpdateHash", "TEXT", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("LastAnimeUpdateHash", lastAnimeUpdateHashColumnBase);
            var lastMangaUpdateHashColumnBase = new ColumnBase<ColumnMappingBase>("LastMangaUpdateHash", "TEXT", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("LastMangaUpdateHash", lastMangaUpdateHashColumnBase);
            var lastUpdatedAnimeListTimestampColumnBase = new ColumnBase<ColumnMappingBase>("LastUpdatedAnimeListTimestamp", "INTEGER", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("LastUpdatedAnimeListTimestamp", lastUpdatedAnimeListTimestampColumnBase);
            var lastUpdatedMangaListTimestampColumnBase = new ColumnBase<ColumnMappingBase>("LastUpdatedMangaListTimestamp", "INTEGER", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("LastUpdatedMangaListTimestamp", lastUpdatedMangaListTimestampColumnBase);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("UserId", userIdColumnBase2);
            var usernameColumnBase = new ColumnBase<ColumnMappingBase>("Username", "TEXT", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.Columns.Add("Username", usernameColumnBase);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.MyAnimeList.MalUser", paperMalKingDatabaseModelsMyAnimeListMalUserTableBase);
            var paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase = new TableMappingBase<ColumnMappingBase>(malUser, paperMalKingDatabaseModelsMyAnimeListMalUserTableBase, null);
            paperMalKingDatabaseModelsMyAnimeListMalUserTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase, false);
            defaultTableMappings12.Add(paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, malUser.FindProperty("UserId")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discordUserIdColumnBase1, malUser.FindProperty("DiscordUserId")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favoritesIdHashColumnBase, malUser.FindProperty("FavoritesIdHash")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)featuresColumnBase0, malUser.FindProperty("Features")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastAnimeUpdateHashColumnBase, malUser.FindProperty("LastAnimeUpdateHash")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastMangaUpdateHashColumnBase, malUser.FindProperty("LastMangaUpdateHash")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastUpdatedAnimeListTimestampColumnBase, malUser.FindProperty("LastUpdatedAnimeListTimestamp")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastUpdatedMangaListTimestampColumnBase, malUser.FindProperty("LastUpdatedMangaListTimestamp")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usernameColumnBase, malUser.FindProperty("Username")!, paperMalKingDatabaseModelsMyAnimeListMalUserMappingBase);

            var tableMappings12 = new List<TableMapping>();
            malUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var malUsersTable = new Table("MalUsers", null, relationalModel);
            var userIdColumn2 = new Column("UserId", "INTEGER", malUsersTable);
            malUsersTable.Columns.Add("UserId", userIdColumn2);
            userIdColumn2.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(userIdColumn2);
            var colorsColumn0 = new JsonColumn("Colors", "TEXT", malUsersTable)
            {
                IsNullable = true
            };
            malUsersTable.Columns.Add("Colors", colorsColumn0);
            colorsColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<JsonElement>(colorsColumn0);
            var discordUserIdColumn1 = new Column("DiscordUserId", "INTEGER", malUsersTable);
            malUsersTable.Columns.Add("DiscordUserId", discordUserIdColumn1);
            discordUserIdColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(discordUserIdColumn1);
            var favoritesIdHashColumn = new Column("FavoritesIdHash", "TEXT", malUsersTable);
            malUsersTable.Columns.Add("FavoritesIdHash", favoritesIdHashColumn);
            favoritesIdHashColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(favoritesIdHashColumn);
            var featuresColumn0 = new Column("Features", "INTEGER", malUsersTable);
            malUsersTable.Columns.Add("Features", featuresColumn0);
            featuresColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(featuresColumn0);
            var lastAnimeUpdateHashColumn = new Column("LastAnimeUpdateHash", "TEXT", malUsersTable);
            malUsersTable.Columns.Add("LastAnimeUpdateHash", lastAnimeUpdateHashColumn);
            lastAnimeUpdateHashColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(lastAnimeUpdateHashColumn);
            var lastMangaUpdateHashColumn = new Column("LastMangaUpdateHash", "TEXT", malUsersTable);
            malUsersTable.Columns.Add("LastMangaUpdateHash", lastMangaUpdateHashColumn);
            lastMangaUpdateHashColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(lastMangaUpdateHashColumn);
            var lastUpdatedAnimeListTimestampColumn = new Column("LastUpdatedAnimeListTimestamp", "INTEGER", malUsersTable);
            malUsersTable.Columns.Add("LastUpdatedAnimeListTimestamp", lastUpdatedAnimeListTimestampColumn);
            lastUpdatedAnimeListTimestampColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<long>(lastUpdatedAnimeListTimestampColumn);
            var lastUpdatedMangaListTimestampColumn = new Column("LastUpdatedMangaListTimestamp", "INTEGER", malUsersTable);
            malUsersTable.Columns.Add("LastUpdatedMangaListTimestamp", lastUpdatedMangaListTimestampColumn);
            lastUpdatedMangaListTimestampColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<long>(lastUpdatedMangaListTimestampColumn);
            var usernameColumn = new Column("Username", "TEXT", malUsersTable);
            malUsersTable.Columns.Add("Username", usernameColumn);
            usernameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(usernameColumn);
            relationalModel.Tables.Add(("MalUsers", null), malUsersTable);
            var malUsersTableMapping = new TableMapping(malUser, malUsersTable, null)
            {
                IsSharedTablePrincipal = true,
            };
            malUsersTable.AddTypeMapping(malUsersTableMapping, false);
            tableMappings12.Add(malUsersTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, malUser.FindProperty("UserId")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(discordUserIdColumn1, malUser.FindProperty("DiscordUserId")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(favoritesIdHashColumn, malUser.FindProperty("FavoritesIdHash")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(featuresColumn0, malUser.FindProperty("Features")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastAnimeUpdateHashColumn, malUser.FindProperty("LastAnimeUpdateHash")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastMangaUpdateHashColumn, malUser.FindProperty("LastMangaUpdateHash")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastUpdatedAnimeListTimestampColumn, malUser.FindProperty("LastUpdatedAnimeListTimestamp")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastUpdatedMangaListTimestampColumn, malUser.FindProperty("LastUpdatedMangaListTimestamp")!, malUsersTableMapping);
            RelationalModel.CreateColumnMapping(usernameColumn, malUser.FindProperty("Username")!, malUsersTableMapping);

            var customUpdateColor0 = FindEntityType("PaperMalKing.Database.Models.MyAnimeList.MalUser.Colors#CustomUpdateColor")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            customUpdateColor0.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorTableBase = new TableBase("PaperMalKing.Database.Models.MyAnimeList.MalUser.Colors#CustomUpdateColor", null, relationalModel);
            var colorsColumnBase0 = new JsonColumnBase("Colors", "TEXT", paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorTableBase.Columns.Add("Colors", colorsColumnBase0);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.MyAnimeList.MalUser.Colors#CustomUpdateColor", paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorTableBase);
            var paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorMappingBase = new TableMappingBase<ColumnMappingBase>(customUpdateColor0, paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorTableBase, null);
            paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorTableBase.AddTypeMapping(paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorMappingBase, false);
            defaultTableMappings13.Add(paperMalKingDatabaseModelsMyAnimeListMalUserColorsCustomUpdateColorMappingBase);

            var tableMappings13 = new List<TableMapping>();
            customUpdateColor0.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var malUsersTableMapping0 = new TableMapping(customUpdateColor0, malUsersTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            malUsersTable.AddTypeMapping(malUsersTableMapping0, true);
            tableMappings13.Add(malUsersTableMapping0);
            malUsersTable.AddRowInternalForeignKey(customUpdateColor0, RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalUser.Colors#CustomUpdateColor",
                new[] { "MalUserUserId" },
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "UserId" }));
            var pK_MalUsers = new UniqueConstraint("PK_MalUsers", malUsersTable, new[] { userIdColumn2 });
            malUsersTable.PrimaryKey = pK_MalUsers;
            pK_MalUsers.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<uint>(pK_MalUsers));
            var pK_MalUsersKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "UserId" });
            pK_MalUsers.MappedKeys.Add(pK_MalUsersKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MalUsersKey).Add(pK_MalUsers);
            malUsersTable.UniqueConstraints.Add("PK_MalUsers", pK_MalUsers);
            var iX_MalUsers_DiscordUserId = new TableIndex(
            "IX_MalUsers_DiscordUserId", malUsersTable, new[] { discordUserIdColumn1 }, true);
            iX_MalUsers_DiscordUserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_MalUsers_DiscordUserId));
            var iX_MalUsers_DiscordUserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "DiscordUserId" });
            iX_MalUsers_DiscordUserId.MappedIndexes.Add(iX_MalUsers_DiscordUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MalUsers_DiscordUserIdIx).Add(iX_MalUsers_DiscordUserId);
            malUsersTable.Indexes.Add("IX_MalUsers_DiscordUserId", iX_MalUsers_DiscordUserId);
            var iX_MalUsers_Features = new TableIndex(
            "IX_MalUsers_Features", malUsersTable, new[] { featuresColumn0 }, false);
            iX_MalUsers_Features.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_MalUsers_Features));
            var iX_MalUsers_FeaturesIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "Features" });
            iX_MalUsers_Features.MappedIndexes.Add(iX_MalUsers_FeaturesIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MalUsers_FeaturesIx).Add(iX_MalUsers_Features);
            malUsersTable.Indexes.Add("IX_MalUsers_Features", iX_MalUsers_Features);

            var shikiDbAchievement = FindEntityType("PaperMalKing.Database.Models.Shikimori.ShikiDbAchievement")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            shikiDbAchievement.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var paperMalKingDatabaseModelsShikimoriShikiDbAchievementTableBase = new TableBase("PaperMalKing.Database.Models.Shikimori.ShikiDbAchievement", null, relationalModel);
            var achievementsColumnBase = new JsonColumnBase("Achievements", "TEXT", paperMalKingDatabaseModelsShikimoriShikiDbAchievementTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsShikimoriShikiDbAchievementTableBase.Columns.Add("Achievements", achievementsColumnBase);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.Shikimori.ShikiDbAchievement", paperMalKingDatabaseModelsShikimoriShikiDbAchievementTableBase);
            var paperMalKingDatabaseModelsShikimoriShikiDbAchievementMappingBase = new TableMappingBase<ColumnMappingBase>(shikiDbAchievement, paperMalKingDatabaseModelsShikimoriShikiDbAchievementTableBase, null);
            paperMalKingDatabaseModelsShikimoriShikiDbAchievementTableBase.AddTypeMapping(paperMalKingDatabaseModelsShikimoriShikiDbAchievementMappingBase, false);
            defaultTableMappings14.Add(paperMalKingDatabaseModelsShikimoriShikiDbAchievementMappingBase);

            var tableMappings14 = new List<TableMapping>();
            shikiDbAchievement.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var shikiUsersTable = new Table("ShikiUsers", null, relationalModel);
            var idColumn2 = new Column("Id", "INTEGER", shikiUsersTable);
            shikiUsersTable.Columns.Add("Id", idColumn2);
            idColumn2.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(idColumn2);
            var achievementsColumn = new JsonColumn("Achievements", "TEXT", shikiUsersTable)
            {
                IsNullable = true
            };
            shikiUsersTable.Columns.Add("Achievements", achievementsColumn);
            achievementsColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<JsonElement>(achievementsColumn);
            var colorsColumn1 = new JsonColumn("Colors", "TEXT", shikiUsersTable)
            {
                IsNullable = true
            };
            shikiUsersTable.Columns.Add("Colors", colorsColumn1);
            colorsColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<JsonElement>(colorsColumn1);
            var discordUserIdColumn2 = new Column("DiscordUserId", "INTEGER", shikiUsersTable);
            shikiUsersTable.Columns.Add("DiscordUserId", discordUserIdColumn2);
            discordUserIdColumn2.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(discordUserIdColumn2);
            var favouritesIdHashColumn0 = new Column("FavouritesIdHash", "TEXT", shikiUsersTable);
            shikiUsersTable.Columns.Add("FavouritesIdHash", favouritesIdHashColumn0);
            favouritesIdHashColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(favouritesIdHashColumn0);
            var featuresColumn1 = new Column("Features", "INTEGER", shikiUsersTable);
            shikiUsersTable.Columns.Add("Features", featuresColumn1);
            featuresColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<ulong>(featuresColumn1);
            var lastHistoryEntryIdColumn = new Column("LastHistoryEntryId", "INTEGER", shikiUsersTable);
            shikiUsersTable.Columns.Add("LastHistoryEntryId", lastHistoryEntryIdColumn);
            lastHistoryEntryIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(lastHistoryEntryIdColumn);
            relationalModel.Tables.Add(("ShikiUsers", null), shikiUsersTable);
            var shikiUsersTableMapping = new TableMapping(shikiDbAchievement, shikiUsersTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            shikiUsersTable.AddTypeMapping(shikiUsersTableMapping, true);
            tableMappings14.Add(shikiUsersTableMapping);
            shikiUsersTable.AddRowInternalForeignKey(shikiDbAchievement, RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiDbAchievement",
                new[] { "ShikiUserId" },
                "PaperMalKing.Database.Models.Shikimori.ShikiUser",
                new[] { "Id" }));

            var shikiFavourite = FindEntityType("PaperMalKing.Database.Models.Shikimori.ShikiFavourite")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            shikiFavourite.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase = new TableBase("PaperMalKing.Database.Models.Shikimori.ShikiFavourite", null, relationalModel);
            var favTypeColumnBase = new ColumnBase<ColumnMappingBase>("FavType", "TEXT", paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase);
            paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase.Columns.Add("FavType", favTypeColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase);
            paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase.Columns.Add("Id", idColumnBase2);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase);
            paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase.Columns.Add("Name", nameColumnBase0);
            var userIdColumnBase3 = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase);
            paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase.Columns.Add("UserId", userIdColumnBase3);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.Shikimori.ShikiFavourite", paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase);
            var paperMalKingDatabaseModelsShikimoriShikiFavouriteMappingBase = new TableMappingBase<ColumnMappingBase>(shikiFavourite, paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase, null);
            paperMalKingDatabaseModelsShikimoriShikiFavouriteTableBase.AddTypeMapping(paperMalKingDatabaseModelsShikimoriShikiFavouriteMappingBase, false);
            defaultTableMappings15.Add(paperMalKingDatabaseModelsShikimoriShikiFavouriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favTypeColumnBase, shikiFavourite.FindProperty("FavType")!, paperMalKingDatabaseModelsShikimoriShikiFavouriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, shikiFavourite.FindProperty("Id")!, paperMalKingDatabaseModelsShikimoriShikiFavouriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase3, shikiFavourite.FindProperty("UserId")!, paperMalKingDatabaseModelsShikimoriShikiFavouriteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, shikiFavourite.FindProperty("Name")!, paperMalKingDatabaseModelsShikimoriShikiFavouriteMappingBase);

            var tableMappings15 = new List<TableMapping>();
            shikiFavourite.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var shikiFavouritesTable = new Table("ShikiFavourites", null, relationalModel);
            var idColumn3 = new Column("Id", "INTEGER", shikiFavouritesTable);
            shikiFavouritesTable.Columns.Add("Id", idColumn3);
            idColumn3.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(idColumn3);
            var favTypeColumn = new Column("FavType", "TEXT", shikiFavouritesTable);
            shikiFavouritesTable.Columns.Add("FavType", favTypeColumn);
            favTypeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(favTypeColumn);
            var userIdColumn3 = new Column("UserId", "INTEGER", shikiFavouritesTable);
            shikiFavouritesTable.Columns.Add("UserId", userIdColumn3);
            userIdColumn3.Accessors = ColumnAccessorsFactory.CreateGeneric<uint>(userIdColumn3);
            var nameColumn0 = new Column("Name", "TEXT", shikiFavouritesTable);
            shikiFavouritesTable.Columns.Add("Name", nameColumn0);
            nameColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameColumn0);
            relationalModel.Tables.Add(("ShikiFavourites", null), shikiFavouritesTable);
            var shikiFavouritesTableMapping = new TableMapping(shikiFavourite, shikiFavouritesTable, null);
            shikiFavouritesTable.AddTypeMapping(shikiFavouritesTableMapping, false);
            tableMappings15.Add(shikiFavouritesTableMapping);
            RelationalModel.CreateColumnMapping(favTypeColumn, shikiFavourite.FindProperty("FavType")!, shikiFavouritesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, shikiFavourite.FindProperty("Id")!, shikiFavouritesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn3, shikiFavourite.FindProperty("UserId")!, shikiFavouritesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, shikiFavourite.FindProperty("Name")!, shikiFavouritesTableMapping);
            var pK_ShikiFavourites = new UniqueConstraint("PK_ShikiFavourites", shikiFavouritesTable, new[] { idColumn3, favTypeColumn, userIdColumn3 });
            shikiFavouritesTable.PrimaryKey = pK_ShikiFavourites;
            pK_ShikiFavourites.SetRowKeyValueFactory(new CompositeRowKeyValueFactory(pK_ShikiFavourites));
            var pK_ShikiFavouritesKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiFavourite",
                new[] { "Id", "FavType", "UserId" });
            pK_ShikiFavourites.MappedKeys.Add(pK_ShikiFavouritesKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ShikiFavouritesKey).Add(pK_ShikiFavourites);
            shikiFavouritesTable.UniqueConstraints.Add("PK_ShikiFavourites", pK_ShikiFavourites);
            var iX_ShikiFavourites_UserId = new TableIndex(
            "IX_ShikiFavourites_UserId", shikiFavouritesTable, new[] { userIdColumn3 }, false);
            iX_ShikiFavourites_UserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<uint>(iX_ShikiFavourites_UserId));
            var iX_ShikiFavourites_UserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiFavourite",
                new[] { "UserId" });
            iX_ShikiFavourites_UserId.MappedIndexes.Add(iX_ShikiFavourites_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ShikiFavourites_UserIdIx).Add(iX_ShikiFavourites_UserId);
            shikiFavouritesTable.Indexes.Add("IX_ShikiFavourites_UserId", iX_ShikiFavourites_UserId);

            var shikiUser = FindEntityType("PaperMalKing.Database.Models.Shikimori.ShikiUser")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            shikiUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var paperMalKingDatabaseModelsShikimoriShikiUserTableBase = new TableBase("PaperMalKing.Database.Models.Shikimori.ShikiUser", null, relationalModel);
            var discordUserIdColumnBase2 = new ColumnBase<ColumnMappingBase>("DiscordUserId", "INTEGER", paperMalKingDatabaseModelsShikimoriShikiUserTableBase);
            paperMalKingDatabaseModelsShikimoriShikiUserTableBase.Columns.Add("DiscordUserId", discordUserIdColumnBase2);
            var favouritesIdHashColumnBase0 = new ColumnBase<ColumnMappingBase>("FavouritesIdHash", "TEXT", paperMalKingDatabaseModelsShikimoriShikiUserTableBase);
            paperMalKingDatabaseModelsShikimoriShikiUserTableBase.Columns.Add("FavouritesIdHash", favouritesIdHashColumnBase0);
            var featuresColumnBase1 = new ColumnBase<ColumnMappingBase>("Features", "INTEGER", paperMalKingDatabaseModelsShikimoriShikiUserTableBase);
            paperMalKingDatabaseModelsShikimoriShikiUserTableBase.Columns.Add("Features", featuresColumnBase1);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", paperMalKingDatabaseModelsShikimoriShikiUserTableBase);
            paperMalKingDatabaseModelsShikimoriShikiUserTableBase.Columns.Add("Id", idColumnBase3);
            var lastHistoryEntryIdColumnBase = new ColumnBase<ColumnMappingBase>("LastHistoryEntryId", "INTEGER", paperMalKingDatabaseModelsShikimoriShikiUserTableBase);
            paperMalKingDatabaseModelsShikimoriShikiUserTableBase.Columns.Add("LastHistoryEntryId", lastHistoryEntryIdColumnBase);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.Shikimori.ShikiUser", paperMalKingDatabaseModelsShikimoriShikiUserTableBase);
            var paperMalKingDatabaseModelsShikimoriShikiUserMappingBase = new TableMappingBase<ColumnMappingBase>(shikiUser, paperMalKingDatabaseModelsShikimoriShikiUserTableBase, null);
            paperMalKingDatabaseModelsShikimoriShikiUserTableBase.AddTypeMapping(paperMalKingDatabaseModelsShikimoriShikiUserMappingBase, false);
            defaultTableMappings16.Add(paperMalKingDatabaseModelsShikimoriShikiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, shikiUser.FindProperty("Id")!, paperMalKingDatabaseModelsShikimoriShikiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discordUserIdColumnBase2, shikiUser.FindProperty("DiscordUserId")!, paperMalKingDatabaseModelsShikimoriShikiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)favouritesIdHashColumnBase0, shikiUser.FindProperty("FavouritesIdHash")!, paperMalKingDatabaseModelsShikimoriShikiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)featuresColumnBase1, shikiUser.FindProperty("Features")!, paperMalKingDatabaseModelsShikimoriShikiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastHistoryEntryIdColumnBase, shikiUser.FindProperty("LastHistoryEntryId")!, paperMalKingDatabaseModelsShikimoriShikiUserMappingBase);

            var tableMappings16 = new List<TableMapping>();
            shikiUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var shikiUsersTableMapping0 = new TableMapping(shikiUser, shikiUsersTable, null)
            {
                IsSharedTablePrincipal = true,
            };
            shikiUsersTable.AddTypeMapping(shikiUsersTableMapping0, false);
            tableMappings16.Add(shikiUsersTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn2, shikiUser.FindProperty("Id")!, shikiUsersTableMapping0);
            RelationalModel.CreateColumnMapping(discordUserIdColumn2, shikiUser.FindProperty("DiscordUserId")!, shikiUsersTableMapping0);
            RelationalModel.CreateColumnMapping(favouritesIdHashColumn0, shikiUser.FindProperty("FavouritesIdHash")!, shikiUsersTableMapping0);
            RelationalModel.CreateColumnMapping(featuresColumn1, shikiUser.FindProperty("Features")!, shikiUsersTableMapping0);
            RelationalModel.CreateColumnMapping(lastHistoryEntryIdColumn, shikiUser.FindProperty("LastHistoryEntryId")!, shikiUsersTableMapping0);

            var customUpdateColor1 = FindEntityType("PaperMalKing.Database.Models.Shikimori.ShikiUser.Colors#CustomUpdateColor")!;

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            customUpdateColor1.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorTableBase = new TableBase("PaperMalKing.Database.Models.Shikimori.ShikiUser.Colors#CustomUpdateColor", null, relationalModel);
            var colorsColumnBase1 = new JsonColumnBase("Colors", "TEXT", paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorTableBase)
            {
                IsNullable = true
            };
            paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorTableBase.Columns.Add("Colors", colorsColumnBase1);
            relationalModel.DefaultTables.Add("PaperMalKing.Database.Models.Shikimori.ShikiUser.Colors#CustomUpdateColor", paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorTableBase);
            var paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorMappingBase = new TableMappingBase<ColumnMappingBase>(customUpdateColor1, paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorTableBase, null);
            paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorTableBase.AddTypeMapping(paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorMappingBase, false);
            defaultTableMappings17.Add(paperMalKingDatabaseModelsShikimoriShikiUserColorsCustomUpdateColorMappingBase);

            var tableMappings17 = new List<TableMapping>();
            customUpdateColor1.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var shikiUsersTableMapping1 = new TableMapping(customUpdateColor1, shikiUsersTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            shikiUsersTable.AddTypeMapping(shikiUsersTableMapping1, true);
            tableMappings17.Add(shikiUsersTableMapping1);
            shikiUsersTable.AddRowInternalForeignKey(customUpdateColor1, RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiUser.Colors#CustomUpdateColor",
                new[] { "ShikiUserId" },
                "PaperMalKing.Database.Models.Shikimori.ShikiUser",
                new[] { "Id" }));
            var pK_ShikiUsers = new UniqueConstraint("PK_ShikiUsers", shikiUsersTable, new[] { idColumn2 });
            shikiUsersTable.PrimaryKey = pK_ShikiUsers;
            pK_ShikiUsers.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<uint>(pK_ShikiUsers));
            var pK_ShikiUsersKey = RelationalModel.GetKey(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiUser",
                new[] { "Id" });
            pK_ShikiUsers.MappedKeys.Add(pK_ShikiUsersKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ShikiUsersKey).Add(pK_ShikiUsers);
            shikiUsersTable.UniqueConstraints.Add("PK_ShikiUsers", pK_ShikiUsers);
            var iX_ShikiUsers_DiscordUserId = new TableIndex(
            "IX_ShikiUsers_DiscordUserId", shikiUsersTable, new[] { discordUserIdColumn2 }, true);
            iX_ShikiUsers_DiscordUserId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_ShikiUsers_DiscordUserId));
            var iX_ShikiUsers_DiscordUserIdIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiUser",
                new[] { "DiscordUserId" });
            iX_ShikiUsers_DiscordUserId.MappedIndexes.Add(iX_ShikiUsers_DiscordUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ShikiUsers_DiscordUserIdIx).Add(iX_ShikiUsers_DiscordUserId);
            shikiUsersTable.Indexes.Add("IX_ShikiUsers_DiscordUserId", iX_ShikiUsers_DiscordUserId);
            var iX_ShikiUsers_Features = new TableIndex(
            "IX_ShikiUsers_Features", shikiUsersTable, new[] { featuresColumn1 }, false);
            iX_ShikiUsers_Features.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<ulong>(iX_ShikiUsers_Features));
            var iX_ShikiUsers_FeaturesIx = RelationalModel.GetIndex(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiUser",
                new[] { "Features" });
            iX_ShikiUsers_Features.MappedIndexes.Add(iX_ShikiUsers_FeaturesIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ShikiUsers_FeaturesIx).Add(iX_ShikiUsers_Features);
            shikiUsersTable.Indexes.Add("IX_ShikiUsers_Features", iX_ShikiUsers_Features);
            var fK_AniListFavourites_AniListUsers_UserId = new ForeignKeyConstraint(
                "FK_AniListFavourites_AniListUsers_UserId", aniListFavouritesTable, aniListUsersTable,
                new[] { userIdColumn },
                aniListUsersTable.FindUniqueConstraint("PK_AniListUsers")!, ReferentialAction.Cascade);
            fK_AniListFavourites_AniListUsers_UserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<uint, uint>(fK_AniListFavourites_AniListUsers_UserId));
            var fK_AniListFavourites_AniListUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.AniList.AniListFavourite",
                new[] { "UserId" },
                "PaperMalKing.Database.Models.AniList.AniListUser",
                new[] { "Id" });
            fK_AniListFavourites_AniListUsers_UserId.MappedForeignKeys.Add(fK_AniListFavourites_AniListUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AniListFavourites_AniListUsers_UserIdFk).Add(fK_AniListFavourites_AniListUsers_UserId);
            aniListFavouritesTable.ForeignKeyConstraints.Add(fK_AniListFavourites_AniListUsers_UserId);
            aniListUsersTable.ReferencingForeignKeyConstraints.Add(fK_AniListFavourites_AniListUsers_UserId);
            var fK_AniListUsers_DiscordUsers_DiscordUserId = new ForeignKeyConstraint(
                "FK_AniListUsers_DiscordUsers_DiscordUserId", aniListUsersTable, discordUsersTable,
                new[] { discordUserIdColumn },
                discordUsersTable.FindUniqueConstraint("PK_DiscordUsers")!, ReferentialAction.Cascade);
            fK_AniListUsers_DiscordUsers_DiscordUserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong, ulong>(fK_AniListUsers_DiscordUsers_DiscordUserId));
            var fK_AniListUsers_DiscordUsers_DiscordUserIdFk = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.AniList.AniListUser",
                new[] { "DiscordUserId" },
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "DiscordUserId" });
            fK_AniListUsers_DiscordUsers_DiscordUserId.MappedForeignKeys.Add(fK_AniListUsers_DiscordUsers_DiscordUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AniListUsers_DiscordUsers_DiscordUserIdFk).Add(fK_AniListUsers_DiscordUsers_DiscordUserId);
            aniListUsersTable.ForeignKeyConstraints.Add(fK_AniListUsers_DiscordUsers_DiscordUserId);
            discordUsersTable.ReferencingForeignKeyConstraints.Add(fK_AniListUsers_DiscordUsers_DiscordUserId);
            var fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId = new ForeignKeyConstraint(
                "FK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId", discordGuildDiscordUserTable, discordGuildsTable,
                new[] { guildsDiscordGuildIdColumn },
                discordGuildsTable.FindUniqueConstraint("PK_DiscordGuilds")!, ReferentialAction.Cascade);
            fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong, ulong>(fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId));
            var fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildIdFk = RelationalModel.GetForeignKey(this,
                "DiscordGuildDiscordUser",
                new[] { "GuildsDiscordGuildId" },
                "PaperMalKing.Database.Models.DiscordGuild",
                new[] { "DiscordGuildId" });
            fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId.MappedForeignKeys.Add(fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildIdFk).Add(fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId);
            discordGuildDiscordUserTable.ForeignKeyConstraints.Add(fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId);
            discordGuildsTable.ReferencingForeignKeyConstraints.Add(fK_DiscordGuildDiscordUser_DiscordGuilds_GuildsDiscordGuildId);
            var fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId = new ForeignKeyConstraint(
                "FK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId", discordGuildDiscordUserTable, discordUsersTable,
                new[] { usersDiscordUserIdColumn },
                discordUsersTable.FindUniqueConstraint("PK_DiscordUsers")!, ReferentialAction.Cascade);
            fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong, ulong>(fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId));
            var fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserIdFk = RelationalModel.GetForeignKey(this,
                "DiscordGuildDiscordUser",
                new[] { "UsersDiscordUserId" },
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "DiscordUserId" });
            fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId.MappedForeignKeys.Add(fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserIdFk).Add(fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId);
            discordGuildDiscordUserTable.ForeignKeyConstraints.Add(fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId);
            discordUsersTable.ReferencingForeignKeyConstraints.Add(fK_DiscordGuildDiscordUser_DiscordUsers_UsersDiscordUserId);
            var fK_DiscordUsers_BotUsers_BotUserId = new ForeignKeyConstraint(
                "FK_DiscordUsers_BotUsers_BotUserId", discordUsersTable, botUsersTable,
                new[] { botUserIdColumn },
                botUsersTable.FindUniqueConstraint("PK_BotUsers")!, ReferentialAction.Cascade);
            fK_DiscordUsers_BotUsers_BotUserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<uint, uint>(fK_DiscordUsers_BotUsers_BotUserId));
            var fK_DiscordUsers_BotUsers_BotUserIdFk = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "BotUserId" },
                "PaperMalKing.Database.Models.BotUser",
                new[] { "UserId" });
            fK_DiscordUsers_BotUsers_BotUserId.MappedForeignKeys.Add(fK_DiscordUsers_BotUsers_BotUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DiscordUsers_BotUsers_BotUserIdFk).Add(fK_DiscordUsers_BotUsers_BotUserId);
            discordUsersTable.ForeignKeyConstraints.Add(fK_DiscordUsers_BotUsers_BotUserId);
            botUsersTable.ReferencingForeignKeyConstraints.Add(fK_DiscordUsers_BotUsers_BotUserId);
            var fK_MalFavorites_MalUsers_UserId = new ForeignKeyConstraint(
                "FK_MalFavorites_MalUsers_UserId", malFavoritesTable, malUsersTable,
                new[] { userIdColumn1 },
                malUsersTable.FindUniqueConstraint("PK_MalUsers")!, ReferentialAction.Cascade);
            fK_MalFavorites_MalUsers_UserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<uint, uint>(fK_MalFavorites_MalUsers_UserId));
            var fK_MalFavorites_MalUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalFavoriteAnime",
                new[] { "UserId" },
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "UserId" });
            fK_MalFavorites_MalUsers_UserId.MappedForeignKeys.Add(fK_MalFavorites_MalUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MalFavorites_MalUsers_UserIdFk).Add(fK_MalFavorites_MalUsers_UserId);
            var fK_MalFavorites_MalUsers_UserIdFk0 = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalFavoriteCharacter",
                new[] { "UserId" },
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "UserId" });
            fK_MalFavorites_MalUsers_UserId.MappedForeignKeys.Add(fK_MalFavorites_MalUsers_UserIdFk0);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MalFavorites_MalUsers_UserIdFk0).Add(fK_MalFavorites_MalUsers_UserId);
            var fK_MalFavorites_MalUsers_UserIdFk1 = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalFavoriteCompany",
                new[] { "UserId" },
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "UserId" });
            fK_MalFavorites_MalUsers_UserId.MappedForeignKeys.Add(fK_MalFavorites_MalUsers_UserIdFk1);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MalFavorites_MalUsers_UserIdFk1).Add(fK_MalFavorites_MalUsers_UserId);
            var fK_MalFavorites_MalUsers_UserIdFk2 = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalFavoriteManga",
                new[] { "UserId" },
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "UserId" });
            fK_MalFavorites_MalUsers_UserId.MappedForeignKeys.Add(fK_MalFavorites_MalUsers_UserIdFk2);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MalFavorites_MalUsers_UserIdFk2).Add(fK_MalFavorites_MalUsers_UserId);
            var fK_MalFavorites_MalUsers_UserIdFk3 = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalFavoritePerson",
                new[] { "UserId" },
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "UserId" });
            fK_MalFavorites_MalUsers_UserId.MappedForeignKeys.Add(fK_MalFavorites_MalUsers_UserIdFk3);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MalFavorites_MalUsers_UserIdFk3).Add(fK_MalFavorites_MalUsers_UserId);
            malFavoritesTable.ForeignKeyConstraints.Add(fK_MalFavorites_MalUsers_UserId);
            malUsersTable.ReferencingForeignKeyConstraints.Add(fK_MalFavorites_MalUsers_UserId);
            var fK_MalUsers_DiscordUsers_DiscordUserId = new ForeignKeyConstraint(
                "FK_MalUsers_DiscordUsers_DiscordUserId", malUsersTable, discordUsersTable,
                new[] { discordUserIdColumn1 },
                discordUsersTable.FindUniqueConstraint("PK_DiscordUsers")!, ReferentialAction.Cascade);
            fK_MalUsers_DiscordUsers_DiscordUserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong, ulong>(fK_MalUsers_DiscordUsers_DiscordUserId));
            var fK_MalUsers_DiscordUsers_DiscordUserIdFk = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.MyAnimeList.MalUser",
                new[] { "DiscordUserId" },
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "DiscordUserId" });
            fK_MalUsers_DiscordUsers_DiscordUserId.MappedForeignKeys.Add(fK_MalUsers_DiscordUsers_DiscordUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MalUsers_DiscordUsers_DiscordUserIdFk).Add(fK_MalUsers_DiscordUsers_DiscordUserId);
            malUsersTable.ForeignKeyConstraints.Add(fK_MalUsers_DiscordUsers_DiscordUserId);
            discordUsersTable.ReferencingForeignKeyConstraints.Add(fK_MalUsers_DiscordUsers_DiscordUserId);
            var fK_ShikiFavourites_ShikiUsers_UserId = new ForeignKeyConstraint(
                "FK_ShikiFavourites_ShikiUsers_UserId", shikiFavouritesTable, shikiUsersTable,
                new[] { userIdColumn3 },
                shikiUsersTable.FindUniqueConstraint("PK_ShikiUsers")!, ReferentialAction.Cascade);
            fK_ShikiFavourites_ShikiUsers_UserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<uint, uint>(fK_ShikiFavourites_ShikiUsers_UserId));
            var fK_ShikiFavourites_ShikiUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiFavourite",
                new[] { "UserId" },
                "PaperMalKing.Database.Models.Shikimori.ShikiUser",
                new[] { "Id" });
            fK_ShikiFavourites_ShikiUsers_UserId.MappedForeignKeys.Add(fK_ShikiFavourites_ShikiUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ShikiFavourites_ShikiUsers_UserIdFk).Add(fK_ShikiFavourites_ShikiUsers_UserId);
            shikiFavouritesTable.ForeignKeyConstraints.Add(fK_ShikiFavourites_ShikiUsers_UserId);
            shikiUsersTable.ReferencingForeignKeyConstraints.Add(fK_ShikiFavourites_ShikiUsers_UserId);
            var fK_ShikiUsers_DiscordUsers_DiscordUserId = new ForeignKeyConstraint(
                "FK_ShikiUsers_DiscordUsers_DiscordUserId", shikiUsersTable, discordUsersTable,
                new[] { discordUserIdColumn2 },
                discordUsersTable.FindUniqueConstraint("PK_DiscordUsers")!, ReferentialAction.Cascade);
            fK_ShikiUsers_DiscordUsers_DiscordUserId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong, ulong>(fK_ShikiUsers_DiscordUsers_DiscordUserId));
            var fK_ShikiUsers_DiscordUsers_DiscordUserIdFk = RelationalModel.GetForeignKey(this,
                "PaperMalKing.Database.Models.Shikimori.ShikiUser",
                new[] { "DiscordUserId" },
                "PaperMalKing.Database.Models.DiscordUser",
                new[] { "DiscordUserId" });
            fK_ShikiUsers_DiscordUsers_DiscordUserId.MappedForeignKeys.Add(fK_ShikiUsers_DiscordUsers_DiscordUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ShikiUsers_DiscordUsers_DiscordUserIdFk).Add(fK_ShikiUsers_DiscordUsers_DiscordUserId);
            shikiUsersTable.ForeignKeyConstraints.Add(fK_ShikiUsers_DiscordUsers_DiscordUserId);
            discordUsersTable.ReferencingForeignKeyConstraints.Add(fK_ShikiUsers_DiscordUsers_DiscordUserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
