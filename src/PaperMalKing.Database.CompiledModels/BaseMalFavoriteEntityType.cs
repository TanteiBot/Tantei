// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using PaperMalKing.Database.Models.MyAnimeList;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PaperMalKing.Database.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class BaseMalFavoriteEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PaperMalKing.Database.Models.MyAnimeList.BaseMalFavorite",
                typeof(BaseMalFavorite),
                baseEntityType,
                discriminatorProperty: "FavoriteType",
                derivedTypesCount: 5,
                propertyCount: 6,
                unnamedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(uint),
                propertyInfo: typeof(BaseMalFavorite).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseMalFavorite).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0u);
            id.SetGetter(
                uint (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.Id(entity),
                bool (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.Id(entity) == 0U,
                uint (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.Id(instance),
                bool (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.Id(instance) == 0U);
            id.SetSetter(
                (BaseMalFavorite entity, uint value) => BaseMalFavoriteUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (BaseMalFavorite entity, uint value) => BaseMalFavoriteUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                uint (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.Id(((BaseMalFavorite)(entry.Entity))),
                uint (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.Id(((BaseMalFavorite)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(id, 0),
                uint (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<uint>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = UIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<uint>(id));

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(uint),
                propertyInfo: typeof(BaseMalFavorite).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseMalFavorite).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0u);
            userId.SetGetter(
                uint (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.UserId(entity),
                bool (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.UserId(entity) == 0U,
                uint (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.UserId(instance),
                bool (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.UserId(instance) == 0U);
            userId.SetSetter(
                (BaseMalFavorite entity, uint value) => BaseMalFavoriteUnsafeAccessors.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (BaseMalFavorite entity, uint value) => BaseMalFavoriteUnsafeAccessors.UserId(entity) = value);
            userId.SetAccessors(
                uint (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<uint>(0) : (entry.FlaggedAsTemporary(1) && BaseMalFavoriteUnsafeAccessors.UserId(((BaseMalFavorite)(entry.Entity))) == 0U ? entry.ReadTemporaryValue<uint>(0) : BaseMalFavoriteUnsafeAccessors.UserId(((BaseMalFavorite)(entry.Entity))))),
                uint (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.UserId(((BaseMalFavorite)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(userId, 1),
                uint (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<uint>(userId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            userId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            userId.TypeMapping = UIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            userId.SetCurrentValueComparer(new EntryCurrentValueComparer<uint>(userId));

            var favoriteType = runtimeEntityType.AddProperty(
                "FavoriteType",
                typeof(MalFavoriteType),
                propertyInfo: typeof(BaseMalFavorite).GetProperty("FavoriteType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseMalFavorite).GetField("<FavoriteType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new DiscriminatorValueGeneratorFactory().Create);
            favoriteType.SetGetter(
                MalFavoriteType (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.FavoriteType(entity),
                bool (BaseMalFavorite entity) => object.Equals(((object)(BaseMalFavoriteUnsafeAccessors.FavoriteType(entity))), ((object)((MalFavoriteType)0UL))),
                MalFavoriteType (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.FavoriteType(instance),
                bool (BaseMalFavorite instance) => object.Equals(((object)(BaseMalFavoriteUnsafeAccessors.FavoriteType(instance))), ((object)((MalFavoriteType)0UL))));
            favoriteType.SetSetter(
                (BaseMalFavorite entity, MalFavoriteType value) => BaseMalFavoriteUnsafeAccessors.FavoriteType(entity) = value);
            favoriteType.SetMaterializationSetter(
                (BaseMalFavorite entity, MalFavoriteType value) => BaseMalFavoriteUnsafeAccessors.FavoriteType(entity) = value);
            favoriteType.SetAccessors(
                MalFavoriteType (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.FavoriteType(((BaseMalFavorite)(entry.Entity))),
                MalFavoriteType (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.FavoriteType(((BaseMalFavorite)(entry.Entity))),
                MalFavoriteType (InternalEntityEntry entry) => entry.ReadOriginalValue<MalFavoriteType>(favoriteType, 2),
                MalFavoriteType (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<MalFavoriteType>(favoriteType, 2),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            favoriteType.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            favoriteType.TypeMapping = ByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<MalFavoriteType>(
                    bool (MalFavoriteType v1, MalFavoriteType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (MalFavoriteType v) => ((object)v).GetHashCode(),
                    MalFavoriteType (MalFavoriteType v) => v),
                keyComparer: new ValueComparer<MalFavoriteType>(
                    bool (MalFavoriteType v1, MalFavoriteType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (MalFavoriteType v) => ((object)v).GetHashCode(),
                    MalFavoriteType (MalFavoriteType v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    bool (byte v1, byte v2) => v1 == v2,
                    int (byte v) => ((int)(v)),
                    byte (byte v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<MalFavoriteType, byte>(
                    byte (MalFavoriteType value) => ((byte)(value)),
                    MalFavoriteType (byte value) => ((MalFavoriteType)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<MalFavoriteType, byte>(
                    JsonByteReaderWriter.Instance,
                    new ValueConverter<MalFavoriteType, byte>(
                        byte (MalFavoriteType value) => ((byte)(value)),
                        MalFavoriteType (byte value) => ((MalFavoriteType)(value)))));
            favoriteType.SetCurrentValueComparer(new EntryCurrentValueComparer<MalFavoriteType>(favoriteType));
            favoriteType.SetSentinelFromProviderValue((byte)0);

            var imageUrl = runtimeEntityType.AddProperty(
                "ImageUrl",
                typeof(string),
                propertyInfo: typeof(BaseMalFavorite).GetProperty("ImageUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseMalFavorite).GetField("<ImageUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            imageUrl.SetGetter(
                string (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.ImageUrl(entity),
                bool (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.ImageUrl(entity) == null,
                string (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.ImageUrl(instance),
                bool (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.ImageUrl(instance) == null);
            imageUrl.SetSetter(
                (BaseMalFavorite entity, string value) => BaseMalFavoriteUnsafeAccessors.ImageUrl(entity) = value);
            imageUrl.SetMaterializationSetter(
                (BaseMalFavorite entity, string value) => BaseMalFavoriteUnsafeAccessors.ImageUrl(entity) = value);
            imageUrl.SetAccessors(
                string (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.ImageUrl(((BaseMalFavorite)(entry.Entity))),
                string (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.ImageUrl(((BaseMalFavorite)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(imageUrl, 3),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(imageUrl),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            imageUrl.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            imageUrl.TypeMapping = SqliteStringTypeMapping.Default;

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(BaseMalFavorite).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseMalFavorite).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.SetGetter(
                string (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.Name(entity),
                bool (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.Name(entity) == null,
                string (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.Name(instance),
                bool (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.Name(instance) == null);
            name.SetSetter(
                (BaseMalFavorite entity, string value) => BaseMalFavoriteUnsafeAccessors.Name(entity) = value);
            name.SetMaterializationSetter(
                (BaseMalFavorite entity, string value) => BaseMalFavoriteUnsafeAccessors.Name(entity) = value);
            name.SetAccessors(
                string (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.Name(((BaseMalFavorite)(entry.Entity))),
                string (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.Name(((BaseMalFavorite)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            name.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = SqliteStringTypeMapping.Default;

            var nameUrl = runtimeEntityType.AddProperty(
                "NameUrl",
                typeof(string),
                propertyInfo: typeof(BaseMalFavorite).GetProperty("NameUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseMalFavorite).GetField("<NameUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nameUrl.SetGetter(
                string (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.NameUrl(entity),
                bool (BaseMalFavorite entity) => BaseMalFavoriteUnsafeAccessors.NameUrl(entity) == null,
                string (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.NameUrl(instance),
                bool (BaseMalFavorite instance) => BaseMalFavoriteUnsafeAccessors.NameUrl(instance) == null);
            nameUrl.SetSetter(
                (BaseMalFavorite entity, string value) => BaseMalFavoriteUnsafeAccessors.NameUrl(entity) = value);
            nameUrl.SetMaterializationSetter(
                (BaseMalFavorite entity, string value) => BaseMalFavoriteUnsafeAccessors.NameUrl(entity) = value);
            nameUrl.SetAccessors(
                string (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.NameUrl(((BaseMalFavorite)(entry.Entity))),
                string (InternalEntityEntry entry) => BaseMalFavoriteUnsafeAccessors.NameUrl(((BaseMalFavorite)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(nameUrl, 5),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(nameUrl),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            nameUrl.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nameUrl.TypeMapping = SqliteStringTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id, userId, favoriteType });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { favoriteType });

            var index0 = runtimeEntityType.AddIndex(
                new[] { id });

            var index1 = runtimeEntityType.AddIndex(
                new[] { userId });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var userId = runtimeEntityType.FindProperty("UserId");
            var favoriteType = runtimeEntityType.FindProperty("FavoriteType");
            var imageUrl = runtimeEntityType.FindProperty("ImageUrl");
            var name = runtimeEntityType.FindProperty("Name");
            var nameUrl = runtimeEntityType.FindProperty("NameUrl");
            var key = runtimeEntityType.FindKey(new[] { id, userId, favoriteType });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateCompositeFactory(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<IReadOnlyList<object>>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((BaseMalFavorite)(source.Entity));
                    return ((ISnapshot)(new Snapshot<uint, uint, MalFavoriteType, string, string, string>(((ValueComparer<uint>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(id)), ((ValueComparer<uint>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(userId)), ((ValueComparer<MalFavoriteType>)(((IProperty)favoriteType).GetValueComparer())).Snapshot(source.GetCurrentValue<MalFavoriteType>(favoriteType)), (source.GetCurrentValue<string>(imageUrl) == null ? null : ((ValueComparer<string>)(((IProperty)imageUrl).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(imageUrl))), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), (source.GetCurrentValue<string>(nameUrl) == null ? null : ((ValueComparer<string>)(((IProperty)nameUrl).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(nameUrl))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<uint>(((ValueComparer<uint>)(((IProperty)userId).GetValueComparer())).Snapshot(default(uint))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<uint>(default(uint)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((BaseMalFavorite)(source.Entity));
                    return ((ISnapshot)(new Snapshot<uint, uint, MalFavoriteType>(((ValueComparer<uint>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<uint>(id)), ((ValueComparer<uint>)(((IProperty)userId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<uint>(userId)), ((ValueComparer<MalFavoriteType>)(((IProperty)favoriteType).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<MalFavoriteType>(favoriteType)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 0,
                relationshipCount: 3,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:MappingStrategy", "TPH");
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MalFavorites");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
