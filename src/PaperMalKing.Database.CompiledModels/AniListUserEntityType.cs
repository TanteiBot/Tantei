// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaperMalKing.Database.Models;
using PaperMalKing.Database.Models.AniList;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PaperMalKing.Database.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class AniListUserEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PaperMalKing.Database.Models.AniList.AniListUser",
                typeof(AniListUser),
                baseEntityType,
                propertyCount: 6,
                navigationCount: 3,
                foreignKeyCount: 1,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(uint),
                propertyInfo: typeof(AniListUser).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AniListUser).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0u);
            id.SetGetter(
                uint (AniListUser entity) => AniListUserUnsafeAccessors.Id(entity),
                bool (AniListUser entity) => AniListUserUnsafeAccessors.Id(entity) == 0U,
                uint (AniListUser instance) => AniListUserUnsafeAccessors.Id(instance),
                bool (AniListUser instance) => AniListUserUnsafeAccessors.Id(instance) == 0U);
            id.SetSetter(
                (AniListUser entity, uint value) => AniListUserUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (AniListUser entity, uint value) => AniListUserUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                uint (InternalEntityEntry entry) => AniListUserUnsafeAccessors.Id(((AniListUser)(entry.Entity))),
                uint (InternalEntityEntry entry) => AniListUserUnsafeAccessors.Id(((AniListUser)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(id, 0),
                uint (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<uint>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = UIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<uint>(id));

            var discordUserId = runtimeEntityType.AddProperty(
                "DiscordUserId",
                typeof(ulong),
                propertyInfo: typeof(AniListUser).GetProperty("DiscordUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AniListUser).GetField("<DiscordUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            discordUserId.SetGetter(
                ulong (AniListUser entity) => AniListUserUnsafeAccessors.DiscordUserId(entity),
                bool (AniListUser entity) => AniListUserUnsafeAccessors.DiscordUserId(entity) == 0UL,
                ulong (AniListUser instance) => AniListUserUnsafeAccessors.DiscordUserId(instance),
                bool (AniListUser instance) => AniListUserUnsafeAccessors.DiscordUserId(instance) == 0UL);
            discordUserId.SetSetter(
                (AniListUser entity, ulong value) => AniListUserUnsafeAccessors.DiscordUserId(entity) = value);
            discordUserId.SetMaterializationSetter(
                (AniListUser entity, ulong value) => AniListUserUnsafeAccessors.DiscordUserId(entity) = value);
            discordUserId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(1) && AniListUserUnsafeAccessors.DiscordUserId(((AniListUser)(entry.Entity))) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : AniListUserUnsafeAccessors.DiscordUserId(((AniListUser)(entry.Entity))))),
                ulong (InternalEntityEntry entry) => AniListUserUnsafeAccessors.DiscordUserId(((AniListUser)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(discordUserId, 1),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(discordUserId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            discordUserId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            discordUserId.TypeMapping = SqliteULongTypeMapping.Default;
            discordUserId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(discordUserId));

            var favouritesIdHash = runtimeEntityType.AddProperty(
                "FavouritesIdHash",
                typeof(string),
                propertyInfo: typeof(AniListUser).GetProperty("FavouritesIdHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AniListUser).GetField("<FavouritesIdHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            favouritesIdHash.SetGetter(
                string (AniListUser entity) => AniListUserUnsafeAccessors.FavouritesIdHash(entity),
                bool (AniListUser entity) => AniListUserUnsafeAccessors.FavouritesIdHash(entity) == null,
                string (AniListUser instance) => AniListUserUnsafeAccessors.FavouritesIdHash(instance),
                bool (AniListUser instance) => AniListUserUnsafeAccessors.FavouritesIdHash(instance) == null);
            favouritesIdHash.SetSetter(
                (AniListUser entity, string value) => AniListUserUnsafeAccessors.FavouritesIdHash(entity) = value);
            favouritesIdHash.SetMaterializationSetter(
                (AniListUser entity, string value) => AniListUserUnsafeAccessors.FavouritesIdHash(entity) = value);
            favouritesIdHash.SetAccessors(
                string (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(2) ? entry.ReadStoreGeneratedValue<string>(1) : (entry.FlaggedAsTemporary(2) && AniListUserUnsafeAccessors.FavouritesIdHash(((AniListUser)(entry.Entity))) == null ? entry.ReadTemporaryValue<string>(1) : AniListUserUnsafeAccessors.FavouritesIdHash(((AniListUser)(entry.Entity))))),
                string (InternalEntityEntry entry) => AniListUserUnsafeAccessors.FavouritesIdHash(((AniListUser)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(favouritesIdHash, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(favouritesIdHash),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            favouritesIdHash.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 1);
            favouritesIdHash.TypeMapping = SqliteStringTypeMapping.Default;
            favouritesIdHash.AddAnnotation("Relational:DefaultValue", "");

            var features = runtimeEntityType.AddProperty(
                "Features",
                typeof(AniListUserFeatures),
                propertyInfo: typeof(AniListUser).GetProperty("Features", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AniListUser).GetField("<Features>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            features.SetGetter(
                AniListUserFeatures (AniListUser entity) => AniListUserUnsafeAccessors.Features(entity),
                bool (AniListUser entity) => object.Equals(((object)(AniListUserUnsafeAccessors.Features(entity))), ((object)(AniListUserFeatures.None))),
                AniListUserFeatures (AniListUser instance) => AniListUserUnsafeAccessors.Features(instance),
                bool (AniListUser instance) => object.Equals(((object)(AniListUserUnsafeAccessors.Features(instance))), ((object)(AniListUserFeatures.None))));
            features.SetSetter(
                (AniListUser entity, AniListUserFeatures value) => AniListUserUnsafeAccessors.Features(entity) = value);
            features.SetMaterializationSetter(
                (AniListUser entity, AniListUserFeatures value) => AniListUserUnsafeAccessors.Features(entity) = value);
            features.SetAccessors(
                AniListUserFeatures (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(3) ? entry.ReadStoreGeneratedValue<AniListUserFeatures>(2) : (entry.FlaggedAsTemporary(3) && object.Equals(((object)(AniListUserUnsafeAccessors.Features(((AniListUser)(entry.Entity))))), ((object)(AniListUserFeatures.None))) ? entry.ReadTemporaryValue<AniListUserFeatures>(2) : AniListUserUnsafeAccessors.Features(((AniListUser)(entry.Entity))))),
                AniListUserFeatures (InternalEntityEntry entry) => AniListUserUnsafeAccessors.Features(((AniListUser)(entry.Entity))),
                AniListUserFeatures (InternalEntityEntry entry) => entry.ReadOriginalValue<AniListUserFeatures>(features, 3),
                AniListUserFeatures (InternalEntityEntry entry) => entry.GetCurrentValue<AniListUserFeatures>(features),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            features.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 2);
            features.TypeMapping = SqliteULongTypeMapping.Default.Clone(
                comparer: new ValueComparer<AniListUserFeatures>(
                    bool (AniListUserFeatures v1, AniListUserFeatures v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (AniListUserFeatures v) => ((object)v).GetHashCode(),
                    AniListUserFeatures (AniListUserFeatures v) => v),
                keyComparer: new ValueComparer<AniListUserFeatures>(
                    bool (AniListUserFeatures v1, AniListUserFeatures v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (AniListUserFeatures v) => ((object)v).GetHashCode(),
                    AniListUserFeatures (AniListUserFeatures v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                converter: new ValueConverter<AniListUserFeatures, ulong>(
                    ulong (AniListUserFeatures value) => ((ulong)(value)),
                    AniListUserFeatures (ulong value) => ((AniListUserFeatures)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<AniListUserFeatures, ulong>(
                    JsonUInt64ReaderWriter.Instance,
                    new ValueConverter<AniListUserFeatures, ulong>(
                        ulong (AniListUserFeatures value) => ((ulong)(value)),
                        AniListUserFeatures (ulong value) => ((AniListUserFeatures)(value)))));
            features.SetSentinelFromProviderValue(0ul);
            features.AddAnnotation("Relational:DefaultValue", AniListUserFeatures.AnimeList | AniListUserFeatures.MangaList | AniListUserFeatures.Favourites | AniListUserFeatures.Mention | AniListUserFeatures.Website | AniListUserFeatures.MediaFormat | AniListUserFeatures.MediaStatus);

            var lastActivityTimestamp = runtimeEntityType.AddProperty(
                "LastActivityTimestamp",
                typeof(long),
                propertyInfo: typeof(AniListUser).GetProperty("LastActivityTimestamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AniListUser).GetField("<LastActivityTimestamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            lastActivityTimestamp.SetGetter(
                long (AniListUser entity) => AniListUserUnsafeAccessors.LastActivityTimestamp(entity),
                bool (AniListUser entity) => AniListUserUnsafeAccessors.LastActivityTimestamp(entity) == 0L,
                long (AniListUser instance) => AniListUserUnsafeAccessors.LastActivityTimestamp(instance),
                bool (AniListUser instance) => AniListUserUnsafeAccessors.LastActivityTimestamp(instance) == 0L);
            lastActivityTimestamp.SetSetter(
                (AniListUser entity, long value) => AniListUserUnsafeAccessors.LastActivityTimestamp(entity) = value);
            lastActivityTimestamp.SetMaterializationSetter(
                (AniListUser entity, long value) => AniListUserUnsafeAccessors.LastActivityTimestamp(entity) = value);
            lastActivityTimestamp.SetAccessors(
                long (InternalEntityEntry entry) => AniListUserUnsafeAccessors.LastActivityTimestamp(((AniListUser)(entry.Entity))),
                long (InternalEntityEntry entry) => AniListUserUnsafeAccessors.LastActivityTimestamp(((AniListUser)(entry.Entity))),
                long (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(lastActivityTimestamp, 4),
                long (InternalEntityEntry entry) => entry.GetCurrentValue<long>(lastActivityTimestamp),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            lastActivityTimestamp.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            lastActivityTimestamp.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var lastReviewTimestamp = runtimeEntityType.AddProperty(
                "LastReviewTimestamp",
                typeof(long),
                propertyInfo: typeof(AniListUser).GetProperty("LastReviewTimestamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AniListUser).GetField("<LastReviewTimestamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            lastReviewTimestamp.SetGetter(
                long (AniListUser entity) => AniListUserUnsafeAccessors.LastReviewTimestamp(entity),
                bool (AniListUser entity) => AniListUserUnsafeAccessors.LastReviewTimestamp(entity) == 0L,
                long (AniListUser instance) => AniListUserUnsafeAccessors.LastReviewTimestamp(instance),
                bool (AniListUser instance) => AniListUserUnsafeAccessors.LastReviewTimestamp(instance) == 0L);
            lastReviewTimestamp.SetSetter(
                (AniListUser entity, long value) => AniListUserUnsafeAccessors.LastReviewTimestamp(entity) = value);
            lastReviewTimestamp.SetMaterializationSetter(
                (AniListUser entity, long value) => AniListUserUnsafeAccessors.LastReviewTimestamp(entity) = value);
            lastReviewTimestamp.SetAccessors(
                long (InternalEntityEntry entry) => AniListUserUnsafeAccessors.LastReviewTimestamp(((AniListUser)(entry.Entity))),
                long (InternalEntityEntry entry) => AniListUserUnsafeAccessors.LastReviewTimestamp(((AniListUser)(entry.Entity))),
                long (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(lastReviewTimestamp, 5),
                long (InternalEntityEntry entry) => entry.GetCurrentValue<long>(lastReviewTimestamp),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            lastReviewTimestamp.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            lastReviewTimestamp.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { discordUserId },
                unique: true);

            var index0 = runtimeEntityType.AddIndex(
                new[] { features });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DiscordUserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DiscordUserId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true);

            var discordUser = declaringEntityType.AddNavigation("DiscordUser",
                runtimeForeignKey,
                onDependent: true,
                typeof(DiscordUser),
                propertyInfo: typeof(AniListUser).GetProperty("DiscordUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AniListUser).GetField("<DiscordUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            discordUser.SetGetter(
                DiscordUser (AniListUser entity) => AniListUserUnsafeAccessors.DiscordUser(entity),
                bool (AniListUser entity) => AniListUserUnsafeAccessors.DiscordUser(entity) == null,
                DiscordUser (AniListUser instance) => AniListUserUnsafeAccessors.DiscordUser(instance),
                bool (AniListUser instance) => AniListUserUnsafeAccessors.DiscordUser(instance) == null);
            discordUser.SetSetter(
                (AniListUser entity, DiscordUser value) => AniListUserUnsafeAccessors.DiscordUser(entity) = value);
            discordUser.SetMaterializationSetter(
                (AniListUser entity, DiscordUser value) => AniListUserUnsafeAccessors.DiscordUser(entity) = value);
            discordUser.SetAccessors(
                DiscordUser (InternalEntityEntry entry) => AniListUserUnsafeAccessors.DiscordUser(((AniListUser)(entry.Entity))),
                DiscordUser (InternalEntityEntry entry) => AniListUserUnsafeAccessors.DiscordUser(((AniListUser)(entry.Entity))),
                null,
                DiscordUser (InternalEntityEntry entry) => entry.GetCurrentValue<DiscordUser>(discordUser),
                null);
            discordUser.SetPropertyIndexes(
                index: 1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 3,
                storeGenerationIndex: -1);
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var discordUserId = runtimeEntityType.FindProperty("DiscordUserId");
            var favouritesIdHash = runtimeEntityType.FindProperty("FavouritesIdHash");
            var features = runtimeEntityType.FindProperty("Features");
            var lastActivityTimestamp = runtimeEntityType.FindProperty("LastActivityTimestamp");
            var lastReviewTimestamp = runtimeEntityType.FindProperty("LastReviewTimestamp");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<uint>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<uint>(key));
            var colors = runtimeEntityType.FindNavigation("Colors");
            var discordUser = runtimeEntityType.FindNavigation("DiscordUser");
            var favourites = runtimeEntityType.FindNavigation("Favourites");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((AniListUser)(source.Entity));
                    return ((ISnapshot)(new Snapshot<uint, ulong, string, AniListUserFeatures, long, long>(((ValueComparer<uint>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(id)), ((ValueComparer<ulong>)(((IProperty)discordUserId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(discordUserId)), (source.GetCurrentValue<string>(favouritesIdHash) == null ? null : ((ValueComparer<string>)(((IProperty)favouritesIdHash).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(favouritesIdHash))), ((ValueComparer<AniListUserFeatures>)(((IProperty)features).GetValueComparer())).Snapshot(source.GetCurrentValue<AniListUserFeatures>(features)), ((ValueComparer<long>)(((IProperty)lastActivityTimestamp).GetValueComparer())).Snapshot(source.GetCurrentValue<long>(lastActivityTimestamp)), ((ValueComparer<long>)(((IProperty)lastReviewTimestamp).GetValueComparer())).Snapshot(source.GetCurrentValue<long>(lastReviewTimestamp)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, string, AniListUserFeatures>(((ValueComparer<ulong>)(((IProperty)discordUserId).GetValueComparer())).Snapshot(default(ulong)), (default(string) == null ? null : ((ValueComparer<string>)(((IProperty)favouritesIdHash).GetValueComparer())).Snapshot(default(string))), ((ValueComparer<AniListUserFeatures>)(((IProperty)features).GetValueComparer())).Snapshot(default(AniListUserFeatures))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong, string, AniListUserFeatures>(default(ulong), default(string), default(AniListUserFeatures)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((AniListUser)(source.Entity));
                    return ((ISnapshot)(new Snapshot<uint, ulong, object, object, object>(((ValueComparer<uint>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<uint>(id)), ((ValueComparer<ulong>)(((IProperty)discordUserId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(discordUserId)), SnapshotFactoryFactory.SnapshotCollection(AniListUserUnsafeAccessors.Colors(entity)), AniListUserUnsafeAccessors.DiscordUser(entity), SnapshotFactoryFactory.SnapshotCollection(AniListUserUnsafeAccessors.Favourites(entity)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 3,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 0,
                relationshipCount: 5,
                storeGeneratedCount: 3);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "AniListUsers");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
