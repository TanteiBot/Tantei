// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using PaperMalKing.Database.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PaperMalKing.Database.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class BotUserEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PaperMalKing.Database.Models.BotUser",
                typeof(BotUser),
                baseEntityType,
                propertyCount: 1,
                navigationCount: 1,
                keyCount: 1);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(uint),
                propertyInfo: typeof(BotUser).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BotUser).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0u);
            userId.SetGetter(
                uint (BotUser entity) => BotUserUnsafeAccessors.UserId(entity),
                bool (BotUser entity) => BotUserUnsafeAccessors.UserId(entity) == 0U,
                uint (BotUser instance) => BotUserUnsafeAccessors.UserId(instance),
                bool (BotUser instance) => BotUserUnsafeAccessors.UserId(instance) == 0U);
            userId.SetSetter(
                (BotUser entity, uint value) => BotUserUnsafeAccessors.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (BotUser entity, uint value) => BotUserUnsafeAccessors.UserId(entity) = value);
            userId.SetAccessors(
                uint (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<uint>(0) : (entry.FlaggedAsTemporary(0) && BotUserUnsafeAccessors.UserId(((BotUser)(entry.Entity))) == 0U ? entry.ReadTemporaryValue<uint>(0) : BotUserUnsafeAccessors.UserId(((BotUser)(entry.Entity))))),
                uint (InternalEntityEntry entry) => BotUserUnsafeAccessors.UserId(((BotUser)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(userId, 0),
                uint (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<uint>(userId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            userId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            userId.TypeMapping = UIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            userId.SetCurrentValueComparer(new EntryCurrentValueComparer<uint>(userId));

            var key = runtimeEntityType.AddKey(
                new[] { userId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var userId = runtimeEntityType.FindProperty("UserId");
            var key = runtimeEntityType.FindKey(new[] { userId });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<uint>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<uint>(key));
            var discordUser = runtimeEntityType.FindNavigation("DiscordUser");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((BotUser)(source.Entity));
                    return ((ISnapshot)(new Snapshot<uint>(((ValueComparer<uint>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(userId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<uint>(((ValueComparer<uint>)(((IProperty)userId).GetValueComparer())).Snapshot(default(uint))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<uint>(default(uint)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((BotUser)(source.Entity));
                    return ((ISnapshot)(new Snapshot<uint, object>(((ValueComparer<uint>)(((IProperty)userId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<uint>(userId)), BotUserUnsafeAccessors.DiscordUser(entity))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 1,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 1,
                shadowCount: 0,
                relationshipCount: 2,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "BotUsers");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
